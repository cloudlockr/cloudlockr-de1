// CPEN_Computer_V1_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module CPEN_Computer_V1_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire        System_PLL_sys_clk_clk,                                           //                                         System_PLL_sys_clk.clk
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        JTAG_To_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset,        //        JTAG_To_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire        Onchip_SRAM_reset1_reset_bridge_in_reset_reset,                   //                   Onchip_SRAM_reset1_reset_bridge_in_reset.reset
		input  wire [31:0] JTAG_To_FPGA_Bridge_master_address,                               //                                 JTAG_To_FPGA_Bridge_master.address
		output wire        JTAG_To_FPGA_Bridge_master_waitrequest,                           //                                                           .waitrequest
		input  wire [3:0]  JTAG_To_FPGA_Bridge_master_byteenable,                            //                                                           .byteenable
		input  wire        JTAG_To_FPGA_Bridge_master_read,                                  //                                                           .read
		output wire [31:0] JTAG_To_FPGA_Bridge_master_readdata,                              //                                                           .readdata
		output wire        JTAG_To_FPGA_Bridge_master_readdatavalid,                         //                                                           .readdatavalid
		input  wire        JTAG_To_FPGA_Bridge_master_write,                                 //                                                           .write
		input  wire [31:0] JTAG_To_FPGA_Bridge_master_writedata,                             //                                                           .writedata
		output wire [1:0]  HEX0_1_s1_address,                                                //                                                  HEX0_1_s1.address
		output wire        HEX0_1_s1_write,                                                  //                                                           .write
		input  wire [31:0] HEX0_1_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] HEX0_1_s1_writedata,                                              //                                                           .writedata
		output wire        HEX0_1_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  HEX2_3_s1_address,                                                //                                                  HEX2_3_s1.address
		output wire        HEX2_3_s1_write,                                                  //                                                           .write
		input  wire [31:0] HEX2_3_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] HEX2_3_s1_writedata,                                              //                                                           .writedata
		output wire        HEX2_3_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  HEX4_5_s1_address,                                                //                                                  HEX4_5_s1.address
		output wire        HEX4_5_s1_write,                                                  //                                                           .write
		input  wire [31:0] HEX4_5_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] HEX4_5_s1_writedata,                                              //                                                           .writedata
		output wire        HEX4_5_s1_chipselect,                                             //                                                           .chipselect
		output wire [2:0]  Interval_Timer_s1_address,                                        //                                          Interval_Timer_s1.address
		output wire        Interval_Timer_s1_write,                                          //                                                           .write
		input  wire [15:0] Interval_Timer_s1_readdata,                                       //                                                           .readdata
		output wire [15:0] Interval_Timer_s1_writedata,                                      //                                                           .writedata
		output wire        Interval_Timer_s1_chipselect,                                     //                                                           .chipselect
		output wire [0:0]  JTAG_UART_for_ARM_0_avalon_jtag_slave_address,                    //                      JTAG_UART_for_ARM_0_avalon_jtag_slave.address
		output wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_write,                      //                                                           .write
		output wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_read,                       //                                                           .read
		input  wire [31:0] JTAG_UART_for_ARM_0_avalon_jtag_slave_readdata,                   //                                                           .readdata
		output wire [31:0] JTAG_UART_for_ARM_0_avalon_jtag_slave_writedata,                  //                                                           .writedata
		input  wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_waitrequest,                //                                                           .waitrequest
		output wire        JTAG_UART_for_ARM_0_avalon_jtag_slave_chipselect,                 //                                                           .chipselect
		output wire [0:0]  JTAG_UART_for_ARM_1_avalon_jtag_slave_address,                    //                      JTAG_UART_for_ARM_1_avalon_jtag_slave.address
		output wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_write,                      //                                                           .write
		output wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_read,                       //                                                           .read
		input  wire [31:0] JTAG_UART_for_ARM_1_avalon_jtag_slave_readdata,                   //                                                           .readdata
		output wire [31:0] JTAG_UART_for_ARM_1_avalon_jtag_slave_writedata,                  //                                                           .writedata
		input  wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_waitrequest,                //                                                           .waitrequest
		output wire        JTAG_UART_for_ARM_1_avalon_jtag_slave_chipselect,                 //                                                           .chipselect
		output wire [1:0]  LEDS_s1_address,                                                  //                                                    LEDS_s1.address
		output wire        LEDS_s1_write,                                                    //                                                           .write
		input  wire [31:0] LEDS_s1_readdata,                                                 //                                                           .readdata
		output wire [31:0] LEDS_s1_writedata,                                                //                                                           .writedata
		output wire        LEDS_s1_chipselect,                                               //                                                           .chipselect
		output wire [9:0]  Onchip_SRAM_s1_address,                                           //                                             Onchip_SRAM_s1.address
		output wire        Onchip_SRAM_s1_write,                                             //                                                           .write
		input  wire [31:0] Onchip_SRAM_s1_readdata,                                          //                                                           .readdata
		output wire [31:0] Onchip_SRAM_s1_writedata,                                         //                                                           .writedata
		output wire [3:0]  Onchip_SRAM_s1_byteenable,                                        //                                                           .byteenable
		output wire        Onchip_SRAM_s1_chipselect,                                        //                                                           .chipselect
		output wire        Onchip_SRAM_s1_clken,                                             //                                                           .clken
		output wire [1:0]  PushButtons_s1_address,                                           //                                             PushButtons_s1.address
		output wire        PushButtons_s1_write,                                             //                                                           .write
		input  wire [31:0] PushButtons_s1_readdata,                                          //                                                           .readdata
		output wire [31:0] PushButtons_s1_writedata,                                         //                                                           .writedata
		output wire        PushButtons_s1_chipselect,                                        //                                                           .chipselect
		output wire [24:0] SDRAM_s1_address,                                                 //                                                   SDRAM_s1.address
		output wire        SDRAM_s1_write,                                                   //                                                           .write
		output wire        SDRAM_s1_read,                                                    //                                                           .read
		input  wire [15:0] SDRAM_s1_readdata,                                                //                                                           .readdata
		output wire [15:0] SDRAM_s1_writedata,                                               //                                                           .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                                              //                                                           .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                           //                                                           .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                             //                                                           .waitrequest
		output wire        SDRAM_s1_chipselect,                                              //                                                           .chipselect
		output wire [1:0]  Slider_Switches_s1_address,                                       //                                         Slider_Switches_s1.address
		input  wire [31:0] Slider_Switches_s1_readdata,                                      //                                                           .readdata
		output wire [0:0]  SysID_control_slave_address,                                      //                                        SysID_control_slave.address
		input  wire [31:0] SysID_control_slave_readdata,                                     //                                                           .readdata
		output wire [14:0] to_external_bus_bridge_0_avalon_slave_address,                    //                      to_external_bus_bridge_0_avalon_slave.address
		output wire        to_external_bus_bridge_0_avalon_slave_write,                      //                                                           .write
		output wire        to_external_bus_bridge_0_avalon_slave_read,                       //                                                           .read
		input  wire [15:0] to_external_bus_bridge_0_avalon_slave_readdata,                   //                                                           .readdata
		output wire [15:0] to_external_bus_bridge_0_avalon_slave_writedata,                  //                                                           .writedata
		output wire [1:0]  to_external_bus_bridge_0_avalon_slave_byteenable,                 //                                                           .byteenable
		input  wire        to_external_bus_bridge_0_avalon_slave_waitrequest,                //                                                           .waitrequest
		output wire        to_external_bus_bridge_0_avalon_slave_chipselect                  //                                                           .chipselect
	);

	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;                             // JTAG_To_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_To_FPGA_Bridge_master_translator:uav_waitrequest
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;                                // JTAG_To_FPGA_Bridge_master_agent:av_readdata -> JTAG_To_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;                             // JTAG_To_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_To_FPGA_Bridge_master_agent:av_debugaccess
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;                                 // JTAG_To_FPGA_Bridge_master_translator:uav_address -> JTAG_To_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;                                    // JTAG_To_FPGA_Bridge_master_translator:uav_read -> JTAG_To_FPGA_Bridge_master_agent:av_read
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;                              // JTAG_To_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_To_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid;                           // JTAG_To_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_To_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;                                    // JTAG_To_FPGA_Bridge_master_translator:uav_lock -> JTAG_To_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;                                   // JTAG_To_FPGA_Bridge_master_translator:uav_write -> JTAG_To_FPGA_Bridge_master_agent:av_write
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;                               // JTAG_To_FPGA_Bridge_master_translator:uav_writedata -> JTAG_To_FPGA_Bridge_master_agent:av_writedata
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;                              // JTAG_To_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_To_FPGA_Bridge_master_agent:av_burstcount
	wire   [31:0] onchip_sram_s1_agent_m0_readdata;                                                                        // Onchip_SRAM_s1_translator:uav_readdata -> Onchip_SRAM_s1_agent:m0_readdata
	wire          onchip_sram_s1_agent_m0_waitrequest;                                                                     // Onchip_SRAM_s1_translator:uav_waitrequest -> Onchip_SRAM_s1_agent:m0_waitrequest
	wire          onchip_sram_s1_agent_m0_debugaccess;                                                                     // Onchip_SRAM_s1_agent:m0_debugaccess -> Onchip_SRAM_s1_translator:uav_debugaccess
	wire   [31:0] onchip_sram_s1_agent_m0_address;                                                                         // Onchip_SRAM_s1_agent:m0_address -> Onchip_SRAM_s1_translator:uav_address
	wire    [3:0] onchip_sram_s1_agent_m0_byteenable;                                                                      // Onchip_SRAM_s1_agent:m0_byteenable -> Onchip_SRAM_s1_translator:uav_byteenable
	wire          onchip_sram_s1_agent_m0_read;                                                                            // Onchip_SRAM_s1_agent:m0_read -> Onchip_SRAM_s1_translator:uav_read
	wire          onchip_sram_s1_agent_m0_readdatavalid;                                                                   // Onchip_SRAM_s1_translator:uav_readdatavalid -> Onchip_SRAM_s1_agent:m0_readdatavalid
	wire          onchip_sram_s1_agent_m0_lock;                                                                            // Onchip_SRAM_s1_agent:m0_lock -> Onchip_SRAM_s1_translator:uav_lock
	wire   [31:0] onchip_sram_s1_agent_m0_writedata;                                                                       // Onchip_SRAM_s1_agent:m0_writedata -> Onchip_SRAM_s1_translator:uav_writedata
	wire          onchip_sram_s1_agent_m0_write;                                                                           // Onchip_SRAM_s1_agent:m0_write -> Onchip_SRAM_s1_translator:uav_write
	wire    [2:0] onchip_sram_s1_agent_m0_burstcount;                                                                      // Onchip_SRAM_s1_agent:m0_burstcount -> Onchip_SRAM_s1_translator:uav_burstcount
	wire          onchip_sram_s1_agent_rf_source_valid;                                                                    // Onchip_SRAM_s1_agent:rf_source_valid -> Onchip_SRAM_s1_agent_rsp_fifo:in_valid
	wire  [131:0] onchip_sram_s1_agent_rf_source_data;                                                                     // Onchip_SRAM_s1_agent:rf_source_data -> Onchip_SRAM_s1_agent_rsp_fifo:in_data
	wire          onchip_sram_s1_agent_rf_source_ready;                                                                    // Onchip_SRAM_s1_agent_rsp_fifo:in_ready -> Onchip_SRAM_s1_agent:rf_source_ready
	wire          onchip_sram_s1_agent_rf_source_startofpacket;                                                            // Onchip_SRAM_s1_agent:rf_source_startofpacket -> Onchip_SRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_sram_s1_agent_rf_source_endofpacket;                                                              // Onchip_SRAM_s1_agent:rf_source_endofpacket -> Onchip_SRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s1_agent_rsp_fifo_out_valid;                                                                 // Onchip_SRAM_s1_agent_rsp_fifo:out_valid -> Onchip_SRAM_s1_agent:rf_sink_valid
	wire  [131:0] onchip_sram_s1_agent_rsp_fifo_out_data;                                                                  // Onchip_SRAM_s1_agent_rsp_fifo:out_data -> Onchip_SRAM_s1_agent:rf_sink_data
	wire          onchip_sram_s1_agent_rsp_fifo_out_ready;                                                                 // Onchip_SRAM_s1_agent:rf_sink_ready -> Onchip_SRAM_s1_agent_rsp_fifo:out_ready
	wire          onchip_sram_s1_agent_rsp_fifo_out_startofpacket;                                                         // Onchip_SRAM_s1_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s1_agent:rf_sink_startofpacket
	wire          onchip_sram_s1_agent_rsp_fifo_out_endofpacket;                                                           // Onchip_SRAM_s1_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s1_agent:rf_sink_endofpacket
	wire          onchip_sram_s1_agent_rdata_fifo_src_valid;                                                               // Onchip_SRAM_s1_agent:rdata_fifo_src_valid -> Onchip_SRAM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s1_agent_rdata_fifo_src_data;                                                                // Onchip_SRAM_s1_agent:rdata_fifo_src_data -> Onchip_SRAM_s1_agent_rdata_fifo:in_data
	wire          onchip_sram_s1_agent_rdata_fifo_src_ready;                                                               // Onchip_SRAM_s1_agent_rdata_fifo:in_ready -> Onchip_SRAM_s1_agent:rdata_fifo_src_ready
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                              // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                                           // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                                           // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                               // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                                            // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                                  // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                                         // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                                  // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                             // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                                 // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                                            // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                                          // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [113:0] sdram_s1_agent_rf_source_data;                                                                           // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                          // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                                  // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                                    // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                                       // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [113:0] sdram_s1_agent_rsp_fifo_out_data;                                                                        // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                                       // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                               // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                                 // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                                     // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                                      // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                                     // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                                   // SysID_control_slave_translator:uav_readdata -> SysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                                // SysID_control_slave_translator:uav_waitrequest -> SysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                                // SysID_control_slave_agent:m0_debugaccess -> SysID_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                                                    // SysID_control_slave_agent:m0_address -> SysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                                 // SysID_control_slave_agent:m0_byteenable -> SysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                                       // SysID_control_slave_agent:m0_read -> SysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                              // SysID_control_slave_translator:uav_readdatavalid -> SysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                                       // SysID_control_slave_agent:m0_lock -> SysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                                  // SysID_control_slave_agent:m0_writedata -> SysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                                      // SysID_control_slave_agent:m0_write -> SysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                                 // SysID_control_slave_agent:m0_burstcount -> SysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                               // SysID_control_slave_agent:rf_source_valid -> SysID_control_slave_agent_rsp_fifo:in_valid
	wire  [131:0] sysid_control_slave_agent_rf_source_data;                                                                // SysID_control_slave_agent:rf_source_data -> SysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                               // SysID_control_slave_agent_rsp_fifo:in_ready -> SysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                                       // SysID_control_slave_agent:rf_source_startofpacket -> SysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                                         // SysID_control_slave_agent:rf_source_endofpacket -> SysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                                            // SysID_control_slave_agent_rsp_fifo:out_valid -> SysID_control_slave_agent:rf_sink_valid
	wire  [131:0] sysid_control_slave_agent_rsp_fifo_out_data;                                                             // SysID_control_slave_agent_rsp_fifo:out_data -> SysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                                            // SysID_control_slave_agent:rf_sink_ready -> SysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                                    // SysID_control_slave_agent_rsp_fifo:out_startofpacket -> SysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                                      // SysID_control_slave_agent_rsp_fifo:out_endofpacket -> SysID_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                                          // SysID_control_slave_agent:rdata_fifo_src_valid -> SysID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                                           // SysID_control_slave_agent:rdata_fifo_src_data -> SysID_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                                          // SysID_control_slave_agent_rdata_fifo:in_ready -> SysID_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] leds_s1_agent_m0_readdata;                                                                               // LEDS_s1_translator:uav_readdata -> LEDS_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                                            // LEDS_s1_translator:uav_waitrequest -> LEDS_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                                            // LEDS_s1_agent:m0_debugaccess -> LEDS_s1_translator:uav_debugaccess
	wire   [31:0] leds_s1_agent_m0_address;                                                                                // LEDS_s1_agent:m0_address -> LEDS_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                                             // LEDS_s1_agent:m0_byteenable -> LEDS_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                                                   // LEDS_s1_agent:m0_read -> LEDS_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                                          // LEDS_s1_translator:uav_readdatavalid -> LEDS_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                                                   // LEDS_s1_agent:m0_lock -> LEDS_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                                              // LEDS_s1_agent:m0_writedata -> LEDS_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                                                  // LEDS_s1_agent:m0_write -> LEDS_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                                             // LEDS_s1_agent:m0_burstcount -> LEDS_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                                           // LEDS_s1_agent:rf_source_valid -> LEDS_s1_agent_rsp_fifo:in_valid
	wire  [131:0] leds_s1_agent_rf_source_data;                                                                            // LEDS_s1_agent:rf_source_data -> LEDS_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                                           // LEDS_s1_agent_rsp_fifo:in_ready -> LEDS_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                                                   // LEDS_s1_agent:rf_source_startofpacket -> LEDS_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                                     // LEDS_s1_agent:rf_source_endofpacket -> LEDS_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                                        // LEDS_s1_agent_rsp_fifo:out_valid -> LEDS_s1_agent:rf_sink_valid
	wire  [131:0] leds_s1_agent_rsp_fifo_out_data;                                                                         // LEDS_s1_agent_rsp_fifo:out_data -> LEDS_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                                        // LEDS_s1_agent:rf_sink_ready -> LEDS_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                                                // LEDS_s1_agent_rsp_fifo:out_startofpacket -> LEDS_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                                                  // LEDS_s1_agent_rsp_fifo:out_endofpacket -> LEDS_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                                      // LEDS_s1_agent:rdata_fifo_src_valid -> LEDS_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                                       // LEDS_s1_agent:rdata_fifo_src_data -> LEDS_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                                      // LEDS_s1_agent_rdata_fifo:in_ready -> LEDS_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex0_1_s1_agent_m0_readdata;                                                                             // HEX0_1_s1_translator:uav_readdata -> HEX0_1_s1_agent:m0_readdata
	wire          hex0_1_s1_agent_m0_waitrequest;                                                                          // HEX0_1_s1_translator:uav_waitrequest -> HEX0_1_s1_agent:m0_waitrequest
	wire          hex0_1_s1_agent_m0_debugaccess;                                                                          // HEX0_1_s1_agent:m0_debugaccess -> HEX0_1_s1_translator:uav_debugaccess
	wire   [31:0] hex0_1_s1_agent_m0_address;                                                                              // HEX0_1_s1_agent:m0_address -> HEX0_1_s1_translator:uav_address
	wire    [3:0] hex0_1_s1_agent_m0_byteenable;                                                                           // HEX0_1_s1_agent:m0_byteenable -> HEX0_1_s1_translator:uav_byteenable
	wire          hex0_1_s1_agent_m0_read;                                                                                 // HEX0_1_s1_agent:m0_read -> HEX0_1_s1_translator:uav_read
	wire          hex0_1_s1_agent_m0_readdatavalid;                                                                        // HEX0_1_s1_translator:uav_readdatavalid -> HEX0_1_s1_agent:m0_readdatavalid
	wire          hex0_1_s1_agent_m0_lock;                                                                                 // HEX0_1_s1_agent:m0_lock -> HEX0_1_s1_translator:uav_lock
	wire   [31:0] hex0_1_s1_agent_m0_writedata;                                                                            // HEX0_1_s1_agent:m0_writedata -> HEX0_1_s1_translator:uav_writedata
	wire          hex0_1_s1_agent_m0_write;                                                                                // HEX0_1_s1_agent:m0_write -> HEX0_1_s1_translator:uav_write
	wire    [2:0] hex0_1_s1_agent_m0_burstcount;                                                                           // HEX0_1_s1_agent:m0_burstcount -> HEX0_1_s1_translator:uav_burstcount
	wire          hex0_1_s1_agent_rf_source_valid;                                                                         // HEX0_1_s1_agent:rf_source_valid -> HEX0_1_s1_agent_rsp_fifo:in_valid
	wire  [131:0] hex0_1_s1_agent_rf_source_data;                                                                          // HEX0_1_s1_agent:rf_source_data -> HEX0_1_s1_agent_rsp_fifo:in_data
	wire          hex0_1_s1_agent_rf_source_ready;                                                                         // HEX0_1_s1_agent_rsp_fifo:in_ready -> HEX0_1_s1_agent:rf_source_ready
	wire          hex0_1_s1_agent_rf_source_startofpacket;                                                                 // HEX0_1_s1_agent:rf_source_startofpacket -> HEX0_1_s1_agent_rsp_fifo:in_startofpacket
	wire          hex0_1_s1_agent_rf_source_endofpacket;                                                                   // HEX0_1_s1_agent:rf_source_endofpacket -> HEX0_1_s1_agent_rsp_fifo:in_endofpacket
	wire          hex0_1_s1_agent_rsp_fifo_out_valid;                                                                      // HEX0_1_s1_agent_rsp_fifo:out_valid -> HEX0_1_s1_agent:rf_sink_valid
	wire  [131:0] hex0_1_s1_agent_rsp_fifo_out_data;                                                                       // HEX0_1_s1_agent_rsp_fifo:out_data -> HEX0_1_s1_agent:rf_sink_data
	wire          hex0_1_s1_agent_rsp_fifo_out_ready;                                                                      // HEX0_1_s1_agent:rf_sink_ready -> HEX0_1_s1_agent_rsp_fifo:out_ready
	wire          hex0_1_s1_agent_rsp_fifo_out_startofpacket;                                                              // HEX0_1_s1_agent_rsp_fifo:out_startofpacket -> HEX0_1_s1_agent:rf_sink_startofpacket
	wire          hex0_1_s1_agent_rsp_fifo_out_endofpacket;                                                                // HEX0_1_s1_agent_rsp_fifo:out_endofpacket -> HEX0_1_s1_agent:rf_sink_endofpacket
	wire          hex0_1_s1_agent_rdata_fifo_src_valid;                                                                    // HEX0_1_s1_agent:rdata_fifo_src_valid -> HEX0_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex0_1_s1_agent_rdata_fifo_src_data;                                                                     // HEX0_1_s1_agent:rdata_fifo_src_data -> HEX0_1_s1_agent_rdata_fifo:in_data
	wire          hex0_1_s1_agent_rdata_fifo_src_ready;                                                                    // HEX0_1_s1_agent_rdata_fifo:in_ready -> HEX0_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex2_3_s1_agent_m0_readdata;                                                                             // HEX2_3_s1_translator:uav_readdata -> HEX2_3_s1_agent:m0_readdata
	wire          hex2_3_s1_agent_m0_waitrequest;                                                                          // HEX2_3_s1_translator:uav_waitrequest -> HEX2_3_s1_agent:m0_waitrequest
	wire          hex2_3_s1_agent_m0_debugaccess;                                                                          // HEX2_3_s1_agent:m0_debugaccess -> HEX2_3_s1_translator:uav_debugaccess
	wire   [31:0] hex2_3_s1_agent_m0_address;                                                                              // HEX2_3_s1_agent:m0_address -> HEX2_3_s1_translator:uav_address
	wire    [3:0] hex2_3_s1_agent_m0_byteenable;                                                                           // HEX2_3_s1_agent:m0_byteenable -> HEX2_3_s1_translator:uav_byteenable
	wire          hex2_3_s1_agent_m0_read;                                                                                 // HEX2_3_s1_agent:m0_read -> HEX2_3_s1_translator:uav_read
	wire          hex2_3_s1_agent_m0_readdatavalid;                                                                        // HEX2_3_s1_translator:uav_readdatavalid -> HEX2_3_s1_agent:m0_readdatavalid
	wire          hex2_3_s1_agent_m0_lock;                                                                                 // HEX2_3_s1_agent:m0_lock -> HEX2_3_s1_translator:uav_lock
	wire   [31:0] hex2_3_s1_agent_m0_writedata;                                                                            // HEX2_3_s1_agent:m0_writedata -> HEX2_3_s1_translator:uav_writedata
	wire          hex2_3_s1_agent_m0_write;                                                                                // HEX2_3_s1_agent:m0_write -> HEX2_3_s1_translator:uav_write
	wire    [2:0] hex2_3_s1_agent_m0_burstcount;                                                                           // HEX2_3_s1_agent:m0_burstcount -> HEX2_3_s1_translator:uav_burstcount
	wire          hex2_3_s1_agent_rf_source_valid;                                                                         // HEX2_3_s1_agent:rf_source_valid -> HEX2_3_s1_agent_rsp_fifo:in_valid
	wire  [131:0] hex2_3_s1_agent_rf_source_data;                                                                          // HEX2_3_s1_agent:rf_source_data -> HEX2_3_s1_agent_rsp_fifo:in_data
	wire          hex2_3_s1_agent_rf_source_ready;                                                                         // HEX2_3_s1_agent_rsp_fifo:in_ready -> HEX2_3_s1_agent:rf_source_ready
	wire          hex2_3_s1_agent_rf_source_startofpacket;                                                                 // HEX2_3_s1_agent:rf_source_startofpacket -> HEX2_3_s1_agent_rsp_fifo:in_startofpacket
	wire          hex2_3_s1_agent_rf_source_endofpacket;                                                                   // HEX2_3_s1_agent:rf_source_endofpacket -> HEX2_3_s1_agent_rsp_fifo:in_endofpacket
	wire          hex2_3_s1_agent_rsp_fifo_out_valid;                                                                      // HEX2_3_s1_agent_rsp_fifo:out_valid -> HEX2_3_s1_agent:rf_sink_valid
	wire  [131:0] hex2_3_s1_agent_rsp_fifo_out_data;                                                                       // HEX2_3_s1_agent_rsp_fifo:out_data -> HEX2_3_s1_agent:rf_sink_data
	wire          hex2_3_s1_agent_rsp_fifo_out_ready;                                                                      // HEX2_3_s1_agent:rf_sink_ready -> HEX2_3_s1_agent_rsp_fifo:out_ready
	wire          hex2_3_s1_agent_rsp_fifo_out_startofpacket;                                                              // HEX2_3_s1_agent_rsp_fifo:out_startofpacket -> HEX2_3_s1_agent:rf_sink_startofpacket
	wire          hex2_3_s1_agent_rsp_fifo_out_endofpacket;                                                                // HEX2_3_s1_agent_rsp_fifo:out_endofpacket -> HEX2_3_s1_agent:rf_sink_endofpacket
	wire          hex2_3_s1_agent_rdata_fifo_src_valid;                                                                    // HEX2_3_s1_agent:rdata_fifo_src_valid -> HEX2_3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex2_3_s1_agent_rdata_fifo_src_data;                                                                     // HEX2_3_s1_agent:rdata_fifo_src_data -> HEX2_3_s1_agent_rdata_fifo:in_data
	wire          hex2_3_s1_agent_rdata_fifo_src_ready;                                                                    // HEX2_3_s1_agent_rdata_fifo:in_ready -> HEX2_3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex4_5_s1_agent_m0_readdata;                                                                             // HEX4_5_s1_translator:uav_readdata -> HEX4_5_s1_agent:m0_readdata
	wire          hex4_5_s1_agent_m0_waitrequest;                                                                          // HEX4_5_s1_translator:uav_waitrequest -> HEX4_5_s1_agent:m0_waitrequest
	wire          hex4_5_s1_agent_m0_debugaccess;                                                                          // HEX4_5_s1_agent:m0_debugaccess -> HEX4_5_s1_translator:uav_debugaccess
	wire   [31:0] hex4_5_s1_agent_m0_address;                                                                              // HEX4_5_s1_agent:m0_address -> HEX4_5_s1_translator:uav_address
	wire    [3:0] hex4_5_s1_agent_m0_byteenable;                                                                           // HEX4_5_s1_agent:m0_byteenable -> HEX4_5_s1_translator:uav_byteenable
	wire          hex4_5_s1_agent_m0_read;                                                                                 // HEX4_5_s1_agent:m0_read -> HEX4_5_s1_translator:uav_read
	wire          hex4_5_s1_agent_m0_readdatavalid;                                                                        // HEX4_5_s1_translator:uav_readdatavalid -> HEX4_5_s1_agent:m0_readdatavalid
	wire          hex4_5_s1_agent_m0_lock;                                                                                 // HEX4_5_s1_agent:m0_lock -> HEX4_5_s1_translator:uav_lock
	wire   [31:0] hex4_5_s1_agent_m0_writedata;                                                                            // HEX4_5_s1_agent:m0_writedata -> HEX4_5_s1_translator:uav_writedata
	wire          hex4_5_s1_agent_m0_write;                                                                                // HEX4_5_s1_agent:m0_write -> HEX4_5_s1_translator:uav_write
	wire    [2:0] hex4_5_s1_agent_m0_burstcount;                                                                           // HEX4_5_s1_agent:m0_burstcount -> HEX4_5_s1_translator:uav_burstcount
	wire          hex4_5_s1_agent_rf_source_valid;                                                                         // HEX4_5_s1_agent:rf_source_valid -> HEX4_5_s1_agent_rsp_fifo:in_valid
	wire  [131:0] hex4_5_s1_agent_rf_source_data;                                                                          // HEX4_5_s1_agent:rf_source_data -> HEX4_5_s1_agent_rsp_fifo:in_data
	wire          hex4_5_s1_agent_rf_source_ready;                                                                         // HEX4_5_s1_agent_rsp_fifo:in_ready -> HEX4_5_s1_agent:rf_source_ready
	wire          hex4_5_s1_agent_rf_source_startofpacket;                                                                 // HEX4_5_s1_agent:rf_source_startofpacket -> HEX4_5_s1_agent_rsp_fifo:in_startofpacket
	wire          hex4_5_s1_agent_rf_source_endofpacket;                                                                   // HEX4_5_s1_agent:rf_source_endofpacket -> HEX4_5_s1_agent_rsp_fifo:in_endofpacket
	wire          hex4_5_s1_agent_rsp_fifo_out_valid;                                                                      // HEX4_5_s1_agent_rsp_fifo:out_valid -> HEX4_5_s1_agent:rf_sink_valid
	wire  [131:0] hex4_5_s1_agent_rsp_fifo_out_data;                                                                       // HEX4_5_s1_agent_rsp_fifo:out_data -> HEX4_5_s1_agent:rf_sink_data
	wire          hex4_5_s1_agent_rsp_fifo_out_ready;                                                                      // HEX4_5_s1_agent:rf_sink_ready -> HEX4_5_s1_agent_rsp_fifo:out_ready
	wire          hex4_5_s1_agent_rsp_fifo_out_startofpacket;                                                              // HEX4_5_s1_agent_rsp_fifo:out_startofpacket -> HEX4_5_s1_agent:rf_sink_startofpacket
	wire          hex4_5_s1_agent_rsp_fifo_out_endofpacket;                                                                // HEX4_5_s1_agent_rsp_fifo:out_endofpacket -> HEX4_5_s1_agent:rf_sink_endofpacket
	wire          hex4_5_s1_agent_rdata_fifo_src_valid;                                                                    // HEX4_5_s1_agent:rdata_fifo_src_valid -> HEX4_5_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex4_5_s1_agent_rdata_fifo_src_data;                                                                     // HEX4_5_s1_agent:rdata_fifo_src_data -> HEX4_5_s1_agent_rdata_fifo:in_data
	wire          hex4_5_s1_agent_rdata_fifo_src_ready;                                                                    // HEX4_5_s1_agent_rdata_fifo:in_ready -> HEX4_5_s1_agent:rdata_fifo_src_ready
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                                                                    // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_waitrequest;                                                                 // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire          slider_switches_s1_agent_m0_debugaccess;                                                                 // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire   [31:0] slider_switches_s1_agent_m0_address;                                                                     // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                                                                  // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_m0_read;                                                                        // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire          slider_switches_s1_agent_m0_readdatavalid;                                                               // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_lock;                                                                        // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                                                                   // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire          slider_switches_s1_agent_m0_write;                                                                       // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                                                                  // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire          slider_switches_s1_agent_rf_source_valid;                                                                // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire  [131:0] slider_switches_s1_agent_rf_source_data;                                                                 // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                                                                // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rf_source_startofpacket;                                                        // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_s1_agent_rf_source_endofpacket;                                                          // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                                                             // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire  [131:0] slider_switches_s1_agent_rsp_fifo_out_data;                                                              // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                                                             // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;                                                     // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;                                                       // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                                                           // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                                                            // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                                                           // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pushbuttons_s1_agent_m0_readdata;                                                                        // PushButtons_s1_translator:uav_readdata -> PushButtons_s1_agent:m0_readdata
	wire          pushbuttons_s1_agent_m0_waitrequest;                                                                     // PushButtons_s1_translator:uav_waitrequest -> PushButtons_s1_agent:m0_waitrequest
	wire          pushbuttons_s1_agent_m0_debugaccess;                                                                     // PushButtons_s1_agent:m0_debugaccess -> PushButtons_s1_translator:uav_debugaccess
	wire   [31:0] pushbuttons_s1_agent_m0_address;                                                                         // PushButtons_s1_agent:m0_address -> PushButtons_s1_translator:uav_address
	wire    [3:0] pushbuttons_s1_agent_m0_byteenable;                                                                      // PushButtons_s1_agent:m0_byteenable -> PushButtons_s1_translator:uav_byteenable
	wire          pushbuttons_s1_agent_m0_read;                                                                            // PushButtons_s1_agent:m0_read -> PushButtons_s1_translator:uav_read
	wire          pushbuttons_s1_agent_m0_readdatavalid;                                                                   // PushButtons_s1_translator:uav_readdatavalid -> PushButtons_s1_agent:m0_readdatavalid
	wire          pushbuttons_s1_agent_m0_lock;                                                                            // PushButtons_s1_agent:m0_lock -> PushButtons_s1_translator:uav_lock
	wire   [31:0] pushbuttons_s1_agent_m0_writedata;                                                                       // PushButtons_s1_agent:m0_writedata -> PushButtons_s1_translator:uav_writedata
	wire          pushbuttons_s1_agent_m0_write;                                                                           // PushButtons_s1_agent:m0_write -> PushButtons_s1_translator:uav_write
	wire    [2:0] pushbuttons_s1_agent_m0_burstcount;                                                                      // PushButtons_s1_agent:m0_burstcount -> PushButtons_s1_translator:uav_burstcount
	wire          pushbuttons_s1_agent_rf_source_valid;                                                                    // PushButtons_s1_agent:rf_source_valid -> PushButtons_s1_agent_rsp_fifo:in_valid
	wire  [131:0] pushbuttons_s1_agent_rf_source_data;                                                                     // PushButtons_s1_agent:rf_source_data -> PushButtons_s1_agent_rsp_fifo:in_data
	wire          pushbuttons_s1_agent_rf_source_ready;                                                                    // PushButtons_s1_agent_rsp_fifo:in_ready -> PushButtons_s1_agent:rf_source_ready
	wire          pushbuttons_s1_agent_rf_source_startofpacket;                                                            // PushButtons_s1_agent:rf_source_startofpacket -> PushButtons_s1_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_s1_agent_rf_source_endofpacket;                                                              // PushButtons_s1_agent:rf_source_endofpacket -> PushButtons_s1_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_valid;                                                                 // PushButtons_s1_agent_rsp_fifo:out_valid -> PushButtons_s1_agent:rf_sink_valid
	wire  [131:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                                                  // PushButtons_s1_agent_rsp_fifo:out_data -> PushButtons_s1_agent:rf_sink_data
	wire          pushbuttons_s1_agent_rsp_fifo_out_ready;                                                                 // PushButtons_s1_agent:rf_sink_ready -> PushButtons_s1_agent_rsp_fifo:out_ready
	wire          pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                                                         // PushButtons_s1_agent_rsp_fifo:out_startofpacket -> PushButtons_s1_agent:rf_sink_startofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                                                           // PushButtons_s1_agent_rsp_fifo:out_endofpacket -> PushButtons_s1_agent:rf_sink_endofpacket
	wire          pushbuttons_s1_agent_rdata_fifo_src_valid;                                                               // PushButtons_s1_agent:rdata_fifo_src_valid -> PushButtons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                                                // PushButtons_s1_agent:rdata_fifo_src_data -> PushButtons_s1_agent_rdata_fifo:in_data
	wire          pushbuttons_s1_agent_rdata_fifo_src_ready;                                                               // PushButtons_s1_agent_rdata_fifo:in_ready -> PushButtons_s1_agent:rdata_fifo_src_ready
	wire   [31:0] interval_timer_s1_agent_m0_readdata;                                                                     // Interval_Timer_s1_translator:uav_readdata -> Interval_Timer_s1_agent:m0_readdata
	wire          interval_timer_s1_agent_m0_waitrequest;                                                                  // Interval_Timer_s1_translator:uav_waitrequest -> Interval_Timer_s1_agent:m0_waitrequest
	wire          interval_timer_s1_agent_m0_debugaccess;                                                                  // Interval_Timer_s1_agent:m0_debugaccess -> Interval_Timer_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_s1_agent_m0_address;                                                                      // Interval_Timer_s1_agent:m0_address -> Interval_Timer_s1_translator:uav_address
	wire    [3:0] interval_timer_s1_agent_m0_byteenable;                                                                   // Interval_Timer_s1_agent:m0_byteenable -> Interval_Timer_s1_translator:uav_byteenable
	wire          interval_timer_s1_agent_m0_read;                                                                         // Interval_Timer_s1_agent:m0_read -> Interval_Timer_s1_translator:uav_read
	wire          interval_timer_s1_agent_m0_readdatavalid;                                                                // Interval_Timer_s1_translator:uav_readdatavalid -> Interval_Timer_s1_agent:m0_readdatavalid
	wire          interval_timer_s1_agent_m0_lock;                                                                         // Interval_Timer_s1_agent:m0_lock -> Interval_Timer_s1_translator:uav_lock
	wire   [31:0] interval_timer_s1_agent_m0_writedata;                                                                    // Interval_Timer_s1_agent:m0_writedata -> Interval_Timer_s1_translator:uav_writedata
	wire          interval_timer_s1_agent_m0_write;                                                                        // Interval_Timer_s1_agent:m0_write -> Interval_Timer_s1_translator:uav_write
	wire    [2:0] interval_timer_s1_agent_m0_burstcount;                                                                   // Interval_Timer_s1_agent:m0_burstcount -> Interval_Timer_s1_translator:uav_burstcount
	wire          interval_timer_s1_agent_rf_source_valid;                                                                 // Interval_Timer_s1_agent:rf_source_valid -> Interval_Timer_s1_agent_rsp_fifo:in_valid
	wire  [131:0] interval_timer_s1_agent_rf_source_data;                                                                  // Interval_Timer_s1_agent:rf_source_data -> Interval_Timer_s1_agent_rsp_fifo:in_data
	wire          interval_timer_s1_agent_rf_source_ready;                                                                 // Interval_Timer_s1_agent_rsp_fifo:in_ready -> Interval_Timer_s1_agent:rf_source_ready
	wire          interval_timer_s1_agent_rf_source_startofpacket;                                                         // Interval_Timer_s1_agent:rf_source_startofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_s1_agent_rf_source_endofpacket;                                                           // Interval_Timer_s1_agent:rf_source_endofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_valid;                                                              // Interval_Timer_s1_agent_rsp_fifo:out_valid -> Interval_Timer_s1_agent:rf_sink_valid
	wire  [131:0] interval_timer_s1_agent_rsp_fifo_out_data;                                                               // Interval_Timer_s1_agent_rsp_fifo:out_data -> Interval_Timer_s1_agent:rf_sink_data
	wire          interval_timer_s1_agent_rsp_fifo_out_ready;                                                              // Interval_Timer_s1_agent:rf_sink_ready -> Interval_Timer_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_s1_agent_rsp_fifo_out_startofpacket;                                                      // Interval_Timer_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_s1_agent:rf_sink_startofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_endofpacket;                                                        // Interval_Timer_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_s1_agent:rf_sink_endofpacket
	wire          interval_timer_s1_agent_rdata_fifo_src_valid;                                                            // Interval_Timer_s1_agent:rdata_fifo_src_valid -> Interval_Timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_src_data;                                                             // Interval_Timer_s1_agent:rdata_fifo_src_data -> Interval_Timer_s1_agent_rdata_fifo:in_data
	wire          interval_timer_s1_agent_rdata_fifo_src_ready;                                                            // Interval_Timer_s1_agent_rdata_fifo:in_ready -> Interval_Timer_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata;                                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest;                                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess;                                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address;                                                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_address -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable;                                               // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read;                                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_read -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid;                                            // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock;                                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata;                                                // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write;                                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_write -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount;                                               // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid;                                             // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [131:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data;                                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready;                                             // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket;                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [131:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                  // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                         // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata;                                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest;                                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess;                                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address;                                                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_address -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable;                                               // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read;                                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_read -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid;                                            // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock;                                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata;                                                // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write;                                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_write -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount;                                               // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid;                                             // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [131:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data;                                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready;                                             // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket;                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket;                                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_valid
	wire  [131:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data;                                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                  // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data;                                         // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [15:0] to_external_bus_bridge_0_avalon_slave_agent_m0_readdata;                                                 // to_external_bus_bridge_0_avalon_slave_translator:uav_readdata -> to_external_bus_bridge_0_avalon_slave_agent:m0_readdata
	wire          to_external_bus_bridge_0_avalon_slave_agent_m0_waitrequest;                                              // to_external_bus_bridge_0_avalon_slave_translator:uav_waitrequest -> to_external_bus_bridge_0_avalon_slave_agent:m0_waitrequest
	wire          to_external_bus_bridge_0_avalon_slave_agent_m0_debugaccess;                                              // to_external_bus_bridge_0_avalon_slave_agent:m0_debugaccess -> to_external_bus_bridge_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] to_external_bus_bridge_0_avalon_slave_agent_m0_address;                                                  // to_external_bus_bridge_0_avalon_slave_agent:m0_address -> to_external_bus_bridge_0_avalon_slave_translator:uav_address
	wire    [1:0] to_external_bus_bridge_0_avalon_slave_agent_m0_byteenable;                                               // to_external_bus_bridge_0_avalon_slave_agent:m0_byteenable -> to_external_bus_bridge_0_avalon_slave_translator:uav_byteenable
	wire          to_external_bus_bridge_0_avalon_slave_agent_m0_read;                                                     // to_external_bus_bridge_0_avalon_slave_agent:m0_read -> to_external_bus_bridge_0_avalon_slave_translator:uav_read
	wire          to_external_bus_bridge_0_avalon_slave_agent_m0_readdatavalid;                                            // to_external_bus_bridge_0_avalon_slave_translator:uav_readdatavalid -> to_external_bus_bridge_0_avalon_slave_agent:m0_readdatavalid
	wire          to_external_bus_bridge_0_avalon_slave_agent_m0_lock;                                                     // to_external_bus_bridge_0_avalon_slave_agent:m0_lock -> to_external_bus_bridge_0_avalon_slave_translator:uav_lock
	wire   [15:0] to_external_bus_bridge_0_avalon_slave_agent_m0_writedata;                                                // to_external_bus_bridge_0_avalon_slave_agent:m0_writedata -> to_external_bus_bridge_0_avalon_slave_translator:uav_writedata
	wire          to_external_bus_bridge_0_avalon_slave_agent_m0_write;                                                    // to_external_bus_bridge_0_avalon_slave_agent:m0_write -> to_external_bus_bridge_0_avalon_slave_translator:uav_write
	wire    [1:0] to_external_bus_bridge_0_avalon_slave_agent_m0_burstcount;                                               // to_external_bus_bridge_0_avalon_slave_agent:m0_burstcount -> to_external_bus_bridge_0_avalon_slave_translator:uav_burstcount
	wire          to_external_bus_bridge_0_avalon_slave_agent_rf_source_valid;                                             // to_external_bus_bridge_0_avalon_slave_agent:rf_source_valid -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [113:0] to_external_bus_bridge_0_avalon_slave_agent_rf_source_data;                                              // to_external_bus_bridge_0_avalon_slave_agent:rf_source_data -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_data
	wire          to_external_bus_bridge_0_avalon_slave_agent_rf_source_ready;                                             // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_ready -> to_external_bus_bridge_0_avalon_slave_agent:rf_source_ready
	wire          to_external_bus_bridge_0_avalon_slave_agent_rf_source_startofpacket;                                     // to_external_bus_bridge_0_avalon_slave_agent:rf_source_startofpacket -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          to_external_bus_bridge_0_avalon_slave_agent_rf_source_endofpacket;                                       // to_external_bus_bridge_0_avalon_slave_agent:rf_source_endofpacket -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_valid;                                          // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_valid -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_valid
	wire  [113:0] to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_data;                                           // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_data -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_data
	wire          to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_ready;                                          // to_external_bus_bridge_0_avalon_slave_agent:rf_sink_ready -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_startofpacket;                                  // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_startofpacket
	wire          to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                                    // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_endofpacket
	wire          to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_valid;                                        // to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_src_valid -> to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo:in_valid
	wire   [17:0] to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_data;                                         // to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_src_data -> to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo:in_data
	wire          to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_ready;                                        // to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo:in_ready -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                                               // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_write_cp_data;                                                                // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                                               // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                                       // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                                         // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                                                // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_read_cp_data;                                                                 // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                                                // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                                        // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                                          // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                                               // JTAG_To_FPGA_Bridge_master_agent:cp_valid -> router_002:sink_valid
	wire  [130:0] jtag_to_fpga_bridge_master_agent_cp_data;                                                                // JTAG_To_FPGA_Bridge_master_agent:cp_data -> router_002:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                                               // router_002:sink_ready -> JTAG_To_FPGA_Bridge_master_agent:cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                                                       // JTAG_To_FPGA_Bridge_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                                                         // JTAG_To_FPGA_Bridge_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                                            // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_003:sink_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                                             // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_003:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                                            // router_003:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                                    // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                                      // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_003:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                                             // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_004:sink_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                              // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_004:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                                             // router_004:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                                     // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_004:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                                       // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_004:sink_endofpacket
	wire          onchip_sram_s1_agent_rp_valid;                                                                           // Onchip_SRAM_s1_agent:rp_valid -> router_005:sink_valid
	wire  [130:0] onchip_sram_s1_agent_rp_data;                                                                            // Onchip_SRAM_s1_agent:rp_data -> router_005:sink_data
	wire          onchip_sram_s1_agent_rp_ready;                                                                           // router_005:sink_ready -> Onchip_SRAM_s1_agent:rp_ready
	wire          onchip_sram_s1_agent_rp_startofpacket;                                                                   // Onchip_SRAM_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          onchip_sram_s1_agent_rp_endofpacket;                                                                     // Onchip_SRAM_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                    // router_005:src_valid -> rsp_demux:sink_valid
	wire  [130:0] router_005_src_data;                                                                                     // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                                                    // rsp_demux:sink_ready -> router_005:src_ready
	wire   [12:0] router_005_src_channel;                                                                                  // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                                            // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                              // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                                 // SDRAM_s1_agent:rp_valid -> router_006:sink_valid
	wire  [112:0] sdram_s1_agent_rp_data;                                                                                  // SDRAM_s1_agent:rp_data -> router_006:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                                 // router_006:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                                         // SDRAM_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                                           // SDRAM_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                    // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [112:0] router_006_src_data;                                                                                     // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                                    // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [12:0] router_006_src_channel;                                                                                  // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                                            // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                              // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                                      // SysID_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [130:0] sysid_control_slave_agent_rp_data;                                                                       // SysID_control_slave_agent:rp_data -> router_007:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                                      // router_007:sink_ready -> SysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                              // SysID_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                                // SysID_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                    // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [130:0] router_007_src_data;                                                                                     // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                                    // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [12:0] router_007_src_channel;                                                                                  // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                                            // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                              // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                                                  // LEDS_s1_agent:rp_valid -> router_008:sink_valid
	wire  [130:0] leds_s1_agent_rp_data;                                                                                   // LEDS_s1_agent:rp_data -> router_008:sink_data
	wire          leds_s1_agent_rp_ready;                                                                                  // router_008:sink_ready -> LEDS_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                                          // LEDS_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                                            // LEDS_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                    // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [130:0] router_008_src_data;                                                                                     // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                                                    // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [12:0] router_008_src_channel;                                                                                  // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                                            // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                              // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          hex0_1_s1_agent_rp_valid;                                                                                // HEX0_1_s1_agent:rp_valid -> router_009:sink_valid
	wire  [130:0] hex0_1_s1_agent_rp_data;                                                                                 // HEX0_1_s1_agent:rp_data -> router_009:sink_data
	wire          hex0_1_s1_agent_rp_ready;                                                                                // router_009:sink_ready -> HEX0_1_s1_agent:rp_ready
	wire          hex0_1_s1_agent_rp_startofpacket;                                                                        // HEX0_1_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          hex0_1_s1_agent_rp_endofpacket;                                                                          // HEX0_1_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                    // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [130:0] router_009_src_data;                                                                                     // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                                    // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [12:0] router_009_src_channel;                                                                                  // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                                            // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                              // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          hex2_3_s1_agent_rp_valid;                                                                                // HEX2_3_s1_agent:rp_valid -> router_010:sink_valid
	wire  [130:0] hex2_3_s1_agent_rp_data;                                                                                 // HEX2_3_s1_agent:rp_data -> router_010:sink_data
	wire          hex2_3_s1_agent_rp_ready;                                                                                // router_010:sink_ready -> HEX2_3_s1_agent:rp_ready
	wire          hex2_3_s1_agent_rp_startofpacket;                                                                        // HEX2_3_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          hex2_3_s1_agent_rp_endofpacket;                                                                          // HEX2_3_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                    // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [130:0] router_010_src_data;                                                                                     // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                                                    // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [12:0] router_010_src_channel;                                                                                  // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                                            // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                              // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          hex4_5_s1_agent_rp_valid;                                                                                // HEX4_5_s1_agent:rp_valid -> router_011:sink_valid
	wire  [130:0] hex4_5_s1_agent_rp_data;                                                                                 // HEX4_5_s1_agent:rp_data -> router_011:sink_data
	wire          hex4_5_s1_agent_rp_ready;                                                                                // router_011:sink_ready -> HEX4_5_s1_agent:rp_ready
	wire          hex4_5_s1_agent_rp_startofpacket;                                                                        // HEX4_5_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          hex4_5_s1_agent_rp_endofpacket;                                                                          // HEX4_5_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                    // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [130:0] router_011_src_data;                                                                                     // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                                                    // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [12:0] router_011_src_channel;                                                                                  // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                                            // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                              // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                                                                       // Slider_Switches_s1_agent:rp_valid -> router_012:sink_valid
	wire  [130:0] slider_switches_s1_agent_rp_data;                                                                        // Slider_Switches_s1_agent:rp_data -> router_012:sink_data
	wire          slider_switches_s1_agent_rp_ready;                                                                       // router_012:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          slider_switches_s1_agent_rp_startofpacket;                                                               // Slider_Switches_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          slider_switches_s1_agent_rp_endofpacket;                                                                 // Slider_Switches_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                    // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [130:0] router_012_src_data;                                                                                     // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                                                    // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [12:0] router_012_src_channel;                                                                                  // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                                            // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                              // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          pushbuttons_s1_agent_rp_valid;                                                                           // PushButtons_s1_agent:rp_valid -> router_013:sink_valid
	wire  [130:0] pushbuttons_s1_agent_rp_data;                                                                            // PushButtons_s1_agent:rp_data -> router_013:sink_data
	wire          pushbuttons_s1_agent_rp_ready;                                                                           // router_013:sink_ready -> PushButtons_s1_agent:rp_ready
	wire          pushbuttons_s1_agent_rp_startofpacket;                                                                   // PushButtons_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          pushbuttons_s1_agent_rp_endofpacket;                                                                     // PushButtons_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                    // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [130:0] router_013_src_data;                                                                                     // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                                                    // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [12:0] router_013_src_channel;                                                                                  // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                                            // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                              // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          interval_timer_s1_agent_rp_valid;                                                                        // Interval_Timer_s1_agent:rp_valid -> router_014:sink_valid
	wire  [130:0] interval_timer_s1_agent_rp_data;                                                                         // Interval_Timer_s1_agent:rp_data -> router_014:sink_data
	wire          interval_timer_s1_agent_rp_ready;                                                                        // router_014:sink_ready -> Interval_Timer_s1_agent:rp_ready
	wire          interval_timer_s1_agent_rp_startofpacket;                                                                // Interval_Timer_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          interval_timer_s1_agent_rp_endofpacket;                                                                  // Interval_Timer_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                    // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [130:0] router_014_src_data;                                                                                     // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                                                    // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [12:0] router_014_src_channel;                                                                                  // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                                            // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                              // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid;                                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_valid -> router_015:sink_valid
	wire  [130:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data;                                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_data -> router_015:sink_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready;                                                    // router_015:sink_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket;                                            // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket;                                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                    // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [130:0] router_015_src_data;                                                                                     // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                                                    // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [12:0] router_015_src_channel;                                                                                  // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                                            // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                              // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid;                                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_valid -> router_016:sink_valid
	wire  [130:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data;                                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_data -> router_016:sink_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready;                                                    // router_016:sink_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket;                                            // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket;                                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                    // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [130:0] router_016_src_data;                                                                                     // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                                                    // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [12:0] router_016_src_channel;                                                                                  // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                                            // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                              // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          to_external_bus_bridge_0_avalon_slave_agent_rp_valid;                                                    // to_external_bus_bridge_0_avalon_slave_agent:rp_valid -> router_017:sink_valid
	wire  [112:0] to_external_bus_bridge_0_avalon_slave_agent_rp_data;                                                     // to_external_bus_bridge_0_avalon_slave_agent:rp_data -> router_017:sink_data
	wire          to_external_bus_bridge_0_avalon_slave_agent_rp_ready;                                                    // router_017:sink_ready -> to_external_bus_bridge_0_avalon_slave_agent:rp_ready
	wire          to_external_bus_bridge_0_avalon_slave_agent_rp_startofpacket;                                            // to_external_bus_bridge_0_avalon_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          to_external_bus_bridge_0_avalon_slave_agent_rp_endofpacket;                                              // to_external_bus_bridge_0_avalon_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                    // router_017:src_valid -> rsp_demux_012:sink_valid
	wire  [112:0] router_017_src_data;                                                                                     // router_017:src_data -> rsp_demux_012:sink_data
	wire          router_017_src_ready;                                                                                    // rsp_demux_012:sink_ready -> router_017:src_ready
	wire   [12:0] router_017_src_channel;                                                                                  // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_startofpacket;                                                                            // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                              // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_src_valid;                                                                                        // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [166:0] router_src_data;                                                                                         // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                        // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [12:0] router_src_channel;                                                                                      // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                                // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                  // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                                            // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                                                           // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                                                         // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                                                   // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                                     // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                       // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_src_data;                                                                                        // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                                       // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [12:0] rsp_mux_src_channel;                                                                                     // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                               // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                 // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                                                           // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                                            // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                                                           // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                                                         // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                                                   // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                                     // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                                    // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [166:0] router_001_src_data;                                                                                     // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                    // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [12:0] router_001_src_channel;                                                                                  // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                            // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                              // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                                            // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                                                           // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                                                         // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                                                   // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                                     // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                   // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_001_src_data;                                                                                    // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                                   // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [12:0] rsp_mux_001_src_channel;                                                                                 // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                           // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                             // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                                                           // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                                            // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                                                           // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                                                         // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                                                   // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                                     // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                                                                    // router_002:src_valid -> JTAG_To_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire  [130:0] router_002_src_data;                                                                                     // router_002:src_data -> JTAG_To_FPGA_Bridge_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                                    // JTAG_To_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [12:0] router_002_src_channel;                                                                                  // router_002:src_channel -> JTAG_To_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                            // router_002:src_startofpacket -> JTAG_To_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                              // router_002:src_endofpacket -> JTAG_To_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire  [130:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                                                         // JTAG_To_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                                                        // cmd_demux_002:sink_ready -> JTAG_To_FPGA_Bridge_master_limiter:cmd_src_ready
	wire   [12:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                                                      // JTAG_To_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                                                // JTAG_To_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                                                  // JTAG_To_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                                   // rsp_mux_002:src_valid -> JTAG_To_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_002_src_data;                                                                                    // rsp_mux_002:src_data -> JTAG_To_FPGA_Bridge_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                                   // JTAG_To_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [12:0] rsp_mux_002_src_channel;                                                                                 // rsp_mux_002:src_channel -> JTAG_To_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                                           // rsp_mux_002:src_startofpacket -> JTAG_To_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                             // rsp_mux_002:src_endofpacket -> JTAG_To_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                                                        // JTAG_To_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_To_FPGA_Bridge_master_agent:rp_valid
	wire  [130:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                                                         // JTAG_To_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_To_FPGA_Bridge_master_agent:rp_data
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                                                        // JTAG_To_FPGA_Bridge_master_agent:rp_ready -> JTAG_To_FPGA_Bridge_master_limiter:rsp_src_ready
	wire   [12:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                                                      // JTAG_To_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_To_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                                                // JTAG_To_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_To_FPGA_Bridge_master_agent:rp_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                                                  // JTAG_To_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_To_FPGA_Bridge_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                                                    // router_003:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [130:0] router_003_src_data;                                                                                     // router_003:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [12:0] router_003_src_channel;                                                                                  // router_003:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                                            // router_003:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                                              // router_003:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [130:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                                         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                                        // cmd_demux_003:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                                   // rsp_mux_003:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_003_src_data;                                                                                    // rsp_mux_003:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [12:0] rsp_mux_003_src_channel;                                                                                 // rsp_mux_003:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                                           // rsp_mux_003:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                             // rsp_mux_003:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                                         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                                        // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                                      // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_004_src_valid;                                                                                    // router_004:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [130:0] router_004_src_data;                                                                                     // router_004:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [12:0] router_004_src_channel;                                                                                  // router_004:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                                            // router_004:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                                              // router_004:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [130:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                                         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                                        // cmd_demux_004:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                                   // rsp_mux_004:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_004_src_data;                                                                                    // rsp_mux_004:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [12:0] rsp_mux_004_src_channel;                                                                                 // rsp_mux_004:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                                           // rsp_mux_004:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                             // rsp_mux_004:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                                         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                                        // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                                      // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                                // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                       // cmd_mux:src_valid -> Onchip_SRAM_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_src_data;                                                                                        // cmd_mux:src_data -> Onchip_SRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                       // Onchip_SRAM_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [12:0] cmd_mux_src_channel;                                                                                     // cmd_mux:src_channel -> Onchip_SRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                               // cmd_mux:src_startofpacket -> Onchip_SRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                 // cmd_mux:src_endofpacket -> Onchip_SRAM_s1_burst_adapter:sink0_endofpacket
	wire          onchip_sram_s1_burst_adapter_source0_valid;                                                              // Onchip_SRAM_s1_burst_adapter:source0_valid -> Onchip_SRAM_s1_agent:cp_valid
	wire  [130:0] onchip_sram_s1_burst_adapter_source0_data;                                                               // Onchip_SRAM_s1_burst_adapter:source0_data -> Onchip_SRAM_s1_agent:cp_data
	wire          onchip_sram_s1_burst_adapter_source0_ready;                                                              // Onchip_SRAM_s1_agent:cp_ready -> Onchip_SRAM_s1_burst_adapter:source0_ready
	wire   [12:0] onchip_sram_s1_burst_adapter_source0_channel;                                                            // Onchip_SRAM_s1_burst_adapter:source0_channel -> Onchip_SRAM_s1_agent:cp_channel
	wire          onchip_sram_s1_burst_adapter_source0_startofpacket;                                                      // Onchip_SRAM_s1_burst_adapter:source0_startofpacket -> Onchip_SRAM_s1_agent:cp_startofpacket
	wire          onchip_sram_s1_burst_adapter_source0_endofpacket;                                                        // Onchip_SRAM_s1_burst_adapter:source0_endofpacket -> Onchip_SRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                   // cmd_mux_001:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_001_src_data;                                                                                    // cmd_mux_001:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                   // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [12:0] cmd_mux_001_src_channel;                                                                                 // cmd_mux_001:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                           // cmd_mux_001:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                             // cmd_mux_001:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                                    // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire  [112:0] sdram_s1_burst_adapter_source0_data;                                                                     // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                                    // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [12:0] sdram_s1_burst_adapter_source0_channel;                                                                  // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                                            // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                              // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                   // cmd_mux_002:src_valid -> SysID_control_slave_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_002_src_data;                                                                                    // cmd_mux_002:src_data -> SysID_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                                   // SysID_control_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [12:0] cmd_mux_002_src_channel;                                                                                 // cmd_mux_002:src_channel -> SysID_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                           // cmd_mux_002:src_startofpacket -> SysID_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                             // cmd_mux_002:src_endofpacket -> SysID_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                                                         // SysID_control_slave_burst_adapter:source0_valid -> SysID_control_slave_agent:cp_valid
	wire  [130:0] sysid_control_slave_burst_adapter_source0_data;                                                          // SysID_control_slave_burst_adapter:source0_data -> SysID_control_slave_agent:cp_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                                                         // SysID_control_slave_agent:cp_ready -> SysID_control_slave_burst_adapter:source0_ready
	wire   [12:0] sysid_control_slave_burst_adapter_source0_channel;                                                       // SysID_control_slave_burst_adapter:source0_channel -> SysID_control_slave_agent:cp_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                                                 // SysID_control_slave_burst_adapter:source0_startofpacket -> SysID_control_slave_agent:cp_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                                                   // SysID_control_slave_burst_adapter:source0_endofpacket -> SysID_control_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                   // cmd_mux_003:src_valid -> LEDS_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_003_src_data;                                                                                    // cmd_mux_003:src_data -> LEDS_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                                   // LEDS_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [12:0] cmd_mux_003_src_channel;                                                                                 // cmd_mux_003:src_channel -> LEDS_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                                           // cmd_mux_003:src_startofpacket -> LEDS_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                             // cmd_mux_003:src_endofpacket -> LEDS_s1_burst_adapter:sink0_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                                                                     // LEDS_s1_burst_adapter:source0_valid -> LEDS_s1_agent:cp_valid
	wire  [130:0] leds_s1_burst_adapter_source0_data;                                                                      // LEDS_s1_burst_adapter:source0_data -> LEDS_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                                                                     // LEDS_s1_agent:cp_ready -> LEDS_s1_burst_adapter:source0_ready
	wire   [12:0] leds_s1_burst_adapter_source0_channel;                                                                   // LEDS_s1_burst_adapter:source0_channel -> LEDS_s1_agent:cp_channel
	wire          leds_s1_burst_adapter_source0_startofpacket;                                                             // LEDS_s1_burst_adapter:source0_startofpacket -> LEDS_s1_agent:cp_startofpacket
	wire          leds_s1_burst_adapter_source0_endofpacket;                                                               // LEDS_s1_burst_adapter:source0_endofpacket -> LEDS_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                   // cmd_mux_004:src_valid -> HEX0_1_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_004_src_data;                                                                                    // cmd_mux_004:src_data -> HEX0_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                                   // HEX0_1_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [12:0] cmd_mux_004_src_channel;                                                                                 // cmd_mux_004:src_channel -> HEX0_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                           // cmd_mux_004:src_startofpacket -> HEX0_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                             // cmd_mux_004:src_endofpacket -> HEX0_1_s1_burst_adapter:sink0_endofpacket
	wire          hex0_1_s1_burst_adapter_source0_valid;                                                                   // HEX0_1_s1_burst_adapter:source0_valid -> HEX0_1_s1_agent:cp_valid
	wire  [130:0] hex0_1_s1_burst_adapter_source0_data;                                                                    // HEX0_1_s1_burst_adapter:source0_data -> HEX0_1_s1_agent:cp_data
	wire          hex0_1_s1_burst_adapter_source0_ready;                                                                   // HEX0_1_s1_agent:cp_ready -> HEX0_1_s1_burst_adapter:source0_ready
	wire   [12:0] hex0_1_s1_burst_adapter_source0_channel;                                                                 // HEX0_1_s1_burst_adapter:source0_channel -> HEX0_1_s1_agent:cp_channel
	wire          hex0_1_s1_burst_adapter_source0_startofpacket;                                                           // HEX0_1_s1_burst_adapter:source0_startofpacket -> HEX0_1_s1_agent:cp_startofpacket
	wire          hex0_1_s1_burst_adapter_source0_endofpacket;                                                             // HEX0_1_s1_burst_adapter:source0_endofpacket -> HEX0_1_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                   // cmd_mux_005:src_valid -> HEX2_3_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_005_src_data;                                                                                    // cmd_mux_005:src_data -> HEX2_3_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                                   // HEX2_3_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [12:0] cmd_mux_005_src_channel;                                                                                 // cmd_mux_005:src_channel -> HEX2_3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                                           // cmd_mux_005:src_startofpacket -> HEX2_3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                             // cmd_mux_005:src_endofpacket -> HEX2_3_s1_burst_adapter:sink0_endofpacket
	wire          hex2_3_s1_burst_adapter_source0_valid;                                                                   // HEX2_3_s1_burst_adapter:source0_valid -> HEX2_3_s1_agent:cp_valid
	wire  [130:0] hex2_3_s1_burst_adapter_source0_data;                                                                    // HEX2_3_s1_burst_adapter:source0_data -> HEX2_3_s1_agent:cp_data
	wire          hex2_3_s1_burst_adapter_source0_ready;                                                                   // HEX2_3_s1_agent:cp_ready -> HEX2_3_s1_burst_adapter:source0_ready
	wire   [12:0] hex2_3_s1_burst_adapter_source0_channel;                                                                 // HEX2_3_s1_burst_adapter:source0_channel -> HEX2_3_s1_agent:cp_channel
	wire          hex2_3_s1_burst_adapter_source0_startofpacket;                                                           // HEX2_3_s1_burst_adapter:source0_startofpacket -> HEX2_3_s1_agent:cp_startofpacket
	wire          hex2_3_s1_burst_adapter_source0_endofpacket;                                                             // HEX2_3_s1_burst_adapter:source0_endofpacket -> HEX2_3_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                   // cmd_mux_006:src_valid -> HEX4_5_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_006_src_data;                                                                                    // cmd_mux_006:src_data -> HEX4_5_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                                   // HEX4_5_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [12:0] cmd_mux_006_src_channel;                                                                                 // cmd_mux_006:src_channel -> HEX4_5_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                                           // cmd_mux_006:src_startofpacket -> HEX4_5_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                             // cmd_mux_006:src_endofpacket -> HEX4_5_s1_burst_adapter:sink0_endofpacket
	wire          hex4_5_s1_burst_adapter_source0_valid;                                                                   // HEX4_5_s1_burst_adapter:source0_valid -> HEX4_5_s1_agent:cp_valid
	wire  [130:0] hex4_5_s1_burst_adapter_source0_data;                                                                    // HEX4_5_s1_burst_adapter:source0_data -> HEX4_5_s1_agent:cp_data
	wire          hex4_5_s1_burst_adapter_source0_ready;                                                                   // HEX4_5_s1_agent:cp_ready -> HEX4_5_s1_burst_adapter:source0_ready
	wire   [12:0] hex4_5_s1_burst_adapter_source0_channel;                                                                 // HEX4_5_s1_burst_adapter:source0_channel -> HEX4_5_s1_agent:cp_channel
	wire          hex4_5_s1_burst_adapter_source0_startofpacket;                                                           // HEX4_5_s1_burst_adapter:source0_startofpacket -> HEX4_5_s1_agent:cp_startofpacket
	wire          hex4_5_s1_burst_adapter_source0_endofpacket;                                                             // HEX4_5_s1_burst_adapter:source0_endofpacket -> HEX4_5_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                   // cmd_mux_007:src_valid -> Slider_Switches_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_007_src_data;                                                                                    // cmd_mux_007:src_data -> Slider_Switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                                   // Slider_Switches_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [12:0] cmd_mux_007_src_channel;                                                                                 // cmd_mux_007:src_channel -> Slider_Switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                                           // cmd_mux_007:src_startofpacket -> Slider_Switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                             // cmd_mux_007:src_endofpacket -> Slider_Switches_s1_burst_adapter:sink0_endofpacket
	wire          slider_switches_s1_burst_adapter_source0_valid;                                                          // Slider_Switches_s1_burst_adapter:source0_valid -> Slider_Switches_s1_agent:cp_valid
	wire  [130:0] slider_switches_s1_burst_adapter_source0_data;                                                           // Slider_Switches_s1_burst_adapter:source0_data -> Slider_Switches_s1_agent:cp_data
	wire          slider_switches_s1_burst_adapter_source0_ready;                                                          // Slider_Switches_s1_agent:cp_ready -> Slider_Switches_s1_burst_adapter:source0_ready
	wire   [12:0] slider_switches_s1_burst_adapter_source0_channel;                                                        // Slider_Switches_s1_burst_adapter:source0_channel -> Slider_Switches_s1_agent:cp_channel
	wire          slider_switches_s1_burst_adapter_source0_startofpacket;                                                  // Slider_Switches_s1_burst_adapter:source0_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire          slider_switches_s1_burst_adapter_source0_endofpacket;                                                    // Slider_Switches_s1_burst_adapter:source0_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                   // cmd_mux_008:src_valid -> PushButtons_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_008_src_data;                                                                                    // cmd_mux_008:src_data -> PushButtons_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                                   // PushButtons_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [12:0] cmd_mux_008_src_channel;                                                                                 // cmd_mux_008:src_channel -> PushButtons_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                                           // cmd_mux_008:src_startofpacket -> PushButtons_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                             // cmd_mux_008:src_endofpacket -> PushButtons_s1_burst_adapter:sink0_endofpacket
	wire          pushbuttons_s1_burst_adapter_source0_valid;                                                              // PushButtons_s1_burst_adapter:source0_valid -> PushButtons_s1_agent:cp_valid
	wire  [130:0] pushbuttons_s1_burst_adapter_source0_data;                                                               // PushButtons_s1_burst_adapter:source0_data -> PushButtons_s1_agent:cp_data
	wire          pushbuttons_s1_burst_adapter_source0_ready;                                                              // PushButtons_s1_agent:cp_ready -> PushButtons_s1_burst_adapter:source0_ready
	wire   [12:0] pushbuttons_s1_burst_adapter_source0_channel;                                                            // PushButtons_s1_burst_adapter:source0_channel -> PushButtons_s1_agent:cp_channel
	wire          pushbuttons_s1_burst_adapter_source0_startofpacket;                                                      // PushButtons_s1_burst_adapter:source0_startofpacket -> PushButtons_s1_agent:cp_startofpacket
	wire          pushbuttons_s1_burst_adapter_source0_endofpacket;                                                        // PushButtons_s1_burst_adapter:source0_endofpacket -> PushButtons_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                                   // cmd_mux_009:src_valid -> Interval_Timer_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_009_src_data;                                                                                    // cmd_mux_009:src_data -> Interval_Timer_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                                   // Interval_Timer_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [12:0] cmd_mux_009_src_channel;                                                                                 // cmd_mux_009:src_channel -> Interval_Timer_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                                           // cmd_mux_009:src_startofpacket -> Interval_Timer_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                             // cmd_mux_009:src_endofpacket -> Interval_Timer_s1_burst_adapter:sink0_endofpacket
	wire          interval_timer_s1_burst_adapter_source0_valid;                                                           // Interval_Timer_s1_burst_adapter:source0_valid -> Interval_Timer_s1_agent:cp_valid
	wire  [130:0] interval_timer_s1_burst_adapter_source0_data;                                                            // Interval_Timer_s1_burst_adapter:source0_data -> Interval_Timer_s1_agent:cp_data
	wire          interval_timer_s1_burst_adapter_source0_ready;                                                           // Interval_Timer_s1_agent:cp_ready -> Interval_Timer_s1_burst_adapter:source0_ready
	wire   [12:0] interval_timer_s1_burst_adapter_source0_channel;                                                         // Interval_Timer_s1_burst_adapter:source0_channel -> Interval_Timer_s1_agent:cp_channel
	wire          interval_timer_s1_burst_adapter_source0_startofpacket;                                                   // Interval_Timer_s1_burst_adapter:source0_startofpacket -> Interval_Timer_s1_agent:cp_startofpacket
	wire          interval_timer_s1_burst_adapter_source0_endofpacket;                                                     // Interval_Timer_s1_burst_adapter:source0_endofpacket -> Interval_Timer_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                                   // cmd_mux_010:src_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_010_src_data;                                                                                    // cmd_mux_010:src_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                                   // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [12:0] cmd_mux_010_src_channel;                                                                                 // cmd_mux_010:src_channel -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                                           // cmd_mux_010:src_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                             // cmd_mux_010:src_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid;                                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_valid
	wire  [130:0] jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data;                                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready;                                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [12:0] jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel;                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket;                               // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                                   // cmd_mux_011:src_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_011_src_data;                                                                                    // cmd_mux_011:src_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                                   // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [12:0] cmd_mux_011_src_channel;                                                                                 // cmd_mux_011:src_channel -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                                           // cmd_mux_011:src_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                             // cmd_mux_011:src_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid;                                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_valid
	wire  [130:0] jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data;                                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready;                                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [12:0] jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel;                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket;                               // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket;                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                                   // cmd_mux_012:src_valid -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_valid
	wire  [112:0] cmd_mux_012_src_data;                                                                                    // cmd_mux_012:src_data -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                                   // to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [12:0] cmd_mux_012_src_channel;                                                                                 // cmd_mux_012:src_channel -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                                           // cmd_mux_012:src_startofpacket -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                             // cmd_mux_012:src_endofpacket -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_endofpacket
	wire          to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_valid;                                       // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_valid -> to_external_bus_bridge_0_avalon_slave_agent:cp_valid
	wire  [112:0] to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_data;                                        // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_data -> to_external_bus_bridge_0_avalon_slave_agent:cp_data
	wire          to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_ready;                                       // to_external_bus_bridge_0_avalon_slave_agent:cp_ready -> to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_ready
	wire   [12:0] to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_channel;                                     // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_channel -> to_external_bus_bridge_0_avalon_slave_agent:cp_channel
	wire          to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_startofpacket;                               // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_startofpacket -> to_external_bus_bridge_0_avalon_slave_agent:cp_startofpacket
	wire          to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_endofpacket;                                 // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_endofpacket -> to_external_bus_bridge_0_avalon_slave_agent:cp_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                                // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [130:0] cmd_demux_002_src0_data;                                                                                 // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                                // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [12:0] cmd_demux_002_src0_channel;                                                                              // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                        // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                          // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                                // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [130:0] cmd_demux_002_src2_data;                                                                                 // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                                // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire   [12:0] cmd_demux_002_src2_channel;                                                                              // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                                        // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                                          // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                                // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire  [130:0] cmd_demux_002_src3_data;                                                                                 // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                                // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire   [12:0] cmd_demux_002_src3_channel;                                                                              // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                                        // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                                          // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                                // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire  [130:0] cmd_demux_002_src4_data;                                                                                 // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src4_ready;                                                                                // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire   [12:0] cmd_demux_002_src4_channel;                                                                              // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                                        // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                                          // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                                // cmd_demux_002:src5_valid -> cmd_mux_005:sink0_valid
	wire  [130:0] cmd_demux_002_src5_data;                                                                                 // cmd_demux_002:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_002_src5_ready;                                                                                // cmd_mux_005:sink0_ready -> cmd_demux_002:src5_ready
	wire   [12:0] cmd_demux_002_src5_channel;                                                                              // cmd_demux_002:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_002_src5_startofpacket;                                                                        // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                                          // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                                // cmd_demux_002:src6_valid -> cmd_mux_006:sink0_valid
	wire  [130:0] cmd_demux_002_src6_data;                                                                                 // cmd_demux_002:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src6_ready;                                                                                // cmd_mux_006:sink0_ready -> cmd_demux_002:src6_ready
	wire   [12:0] cmd_demux_002_src6_channel;                                                                              // cmd_demux_002:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src6_startofpacket;                                                                        // cmd_demux_002:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                                          // cmd_demux_002:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_002_src7_valid;                                                                                // cmd_demux_002:src7_valid -> cmd_mux_007:sink0_valid
	wire  [130:0] cmd_demux_002_src7_data;                                                                                 // cmd_demux_002:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_002_src7_ready;                                                                                // cmd_mux_007:sink0_ready -> cmd_demux_002:src7_ready
	wire   [12:0] cmd_demux_002_src7_channel;                                                                              // cmd_demux_002:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                                        // cmd_demux_002:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                                          // cmd_demux_002:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                                                // cmd_demux_002:src8_valid -> cmd_mux_008:sink0_valid
	wire  [130:0] cmd_demux_002_src8_data;                                                                                 // cmd_demux_002:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_002_src8_ready;                                                                                // cmd_mux_008:sink0_ready -> cmd_demux_002:src8_ready
	wire   [12:0] cmd_demux_002_src8_channel;                                                                              // cmd_demux_002:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_002_src8_startofpacket;                                                                        // cmd_demux_002:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                                          // cmd_demux_002:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_002_src9_valid;                                                                                // cmd_demux_002:src9_valid -> cmd_mux_009:sink0_valid
	wire  [130:0] cmd_demux_002_src9_data;                                                                                 // cmd_demux_002:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_002_src9_ready;                                                                                // cmd_mux_009:sink0_ready -> cmd_demux_002:src9_ready
	wire   [12:0] cmd_demux_002_src9_channel;                                                                              // cmd_demux_002:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_002_src9_startofpacket;                                                                        // cmd_demux_002:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                                          // cmd_demux_002:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                                // cmd_demux_003:src0_valid -> cmd_mux_002:sink1_valid
	wire  [130:0] cmd_demux_003_src0_data;                                                                                 // cmd_demux_003:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_003_src0_ready;                                                                                // cmd_mux_002:sink1_ready -> cmd_demux_003:src0_ready
	wire   [12:0] cmd_demux_003_src0_channel;                                                                              // cmd_demux_003:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                                        // cmd_demux_003:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                          // cmd_demux_003:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                                // cmd_demux_003:src1_valid -> cmd_mux_003:sink1_valid
	wire  [130:0] cmd_demux_003_src1_data;                                                                                 // cmd_demux_003:src1_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                                // cmd_mux_003:sink1_ready -> cmd_demux_003:src1_ready
	wire   [12:0] cmd_demux_003_src1_channel;                                                                              // cmd_demux_003:src1_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                                        // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                                          // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                                // cmd_demux_003:src2_valid -> cmd_mux_004:sink1_valid
	wire  [130:0] cmd_demux_003_src2_data;                                                                                 // cmd_demux_003:src2_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src2_ready;                                                                                // cmd_mux_004:sink1_ready -> cmd_demux_003:src2_ready
	wire   [12:0] cmd_demux_003_src2_channel;                                                                              // cmd_demux_003:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                                                        // cmd_demux_003:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                                          // cmd_demux_003:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                                // cmd_demux_003:src3_valid -> cmd_mux_005:sink1_valid
	wire  [130:0] cmd_demux_003_src3_data;                                                                                 // cmd_demux_003:src3_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_003_src3_ready;                                                                                // cmd_mux_005:sink1_ready -> cmd_demux_003:src3_ready
	wire   [12:0] cmd_demux_003_src3_channel;                                                                              // cmd_demux_003:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                                                        // cmd_demux_003:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                                          // cmd_demux_003:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                                // cmd_demux_003:src4_valid -> cmd_mux_006:sink1_valid
	wire  [130:0] cmd_demux_003_src4_data;                                                                                 // cmd_demux_003:src4_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_003_src4_ready;                                                                                // cmd_mux_006:sink1_ready -> cmd_demux_003:src4_ready
	wire   [12:0] cmd_demux_003_src4_channel;                                                                              // cmd_demux_003:src4_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                                                        // cmd_demux_003:src4_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                                          // cmd_demux_003:src4_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                                                // cmd_demux_003:src5_valid -> cmd_mux_007:sink1_valid
	wire  [130:0] cmd_demux_003_src5_data;                                                                                 // cmd_demux_003:src5_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_003_src5_ready;                                                                                // cmd_mux_007:sink1_ready -> cmd_demux_003:src5_ready
	wire   [12:0] cmd_demux_003_src5_channel;                                                                              // cmd_demux_003:src5_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_003_src5_startofpacket;                                                                        // cmd_demux_003:src5_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                                          // cmd_demux_003:src5_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_003_src6_valid;                                                                                // cmd_demux_003:src6_valid -> cmd_mux_008:sink1_valid
	wire  [130:0] cmd_demux_003_src6_data;                                                                                 // cmd_demux_003:src6_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_003_src6_ready;                                                                                // cmd_mux_008:sink1_ready -> cmd_demux_003:src6_ready
	wire   [12:0] cmd_demux_003_src6_channel;                                                                              // cmd_demux_003:src6_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_003_src6_startofpacket;                                                                        // cmd_demux_003:src6_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                                          // cmd_demux_003:src6_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_003_src7_valid;                                                                                // cmd_demux_003:src7_valid -> cmd_mux_009:sink1_valid
	wire  [130:0] cmd_demux_003_src7_data;                                                                                 // cmd_demux_003:src7_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_003_src7_ready;                                                                                // cmd_mux_009:sink1_ready -> cmd_demux_003:src7_ready
	wire   [12:0] cmd_demux_003_src7_channel;                                                                              // cmd_demux_003:src7_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_003_src7_startofpacket;                                                                        // cmd_demux_003:src7_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                                          // cmd_demux_003:src7_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_003_src8_valid;                                                                                // cmd_demux_003:src8_valid -> cmd_mux_010:sink0_valid
	wire  [130:0] cmd_demux_003_src8_data;                                                                                 // cmd_demux_003:src8_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_003_src8_ready;                                                                                // cmd_mux_010:sink0_ready -> cmd_demux_003:src8_ready
	wire   [12:0] cmd_demux_003_src8_channel;                                                                              // cmd_demux_003:src8_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_003_src8_startofpacket;                                                                        // cmd_demux_003:src8_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                                          // cmd_demux_003:src8_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_003_src9_valid;                                                                                // cmd_demux_003:src9_valid -> cmd_mux_011:sink0_valid
	wire  [130:0] cmd_demux_003_src9_data;                                                                                 // cmd_demux_003:src9_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_003_src9_ready;                                                                                // cmd_mux_011:sink0_ready -> cmd_demux_003:src9_ready
	wire   [12:0] cmd_demux_003_src9_channel;                                                                              // cmd_demux_003:src9_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_003_src9_startofpacket;                                                                        // cmd_demux_003:src9_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                                          // cmd_demux_003:src9_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                                // cmd_demux_004:src0_valid -> cmd_mux_002:sink2_valid
	wire  [130:0] cmd_demux_004_src0_data;                                                                                 // cmd_demux_004:src0_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_004_src0_ready;                                                                                // cmd_mux_002:sink2_ready -> cmd_demux_004:src0_ready
	wire   [12:0] cmd_demux_004_src0_channel;                                                                              // cmd_demux_004:src0_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_004_src0_startofpacket;                                                                        // cmd_demux_004:src0_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                          // cmd_demux_004:src0_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                                // cmd_demux_004:src1_valid -> cmd_mux_003:sink2_valid
	wire  [130:0] cmd_demux_004_src1_data;                                                                                 // cmd_demux_004:src1_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_004_src1_ready;                                                                                // cmd_mux_003:sink2_ready -> cmd_demux_004:src1_ready
	wire   [12:0] cmd_demux_004_src1_channel;                                                                              // cmd_demux_004:src1_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_004_src1_startofpacket;                                                                        // cmd_demux_004:src1_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                                          // cmd_demux_004:src1_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_004_src2_valid;                                                                                // cmd_demux_004:src2_valid -> cmd_mux_004:sink2_valid
	wire  [130:0] cmd_demux_004_src2_data;                                                                                 // cmd_demux_004:src2_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_004_src2_ready;                                                                                // cmd_mux_004:sink2_ready -> cmd_demux_004:src2_ready
	wire   [12:0] cmd_demux_004_src2_channel;                                                                              // cmd_demux_004:src2_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_004_src2_startofpacket;                                                                        // cmd_demux_004:src2_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                                          // cmd_demux_004:src2_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_004_src3_valid;                                                                                // cmd_demux_004:src3_valid -> cmd_mux_005:sink2_valid
	wire  [130:0] cmd_demux_004_src3_data;                                                                                 // cmd_demux_004:src3_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_004_src3_ready;                                                                                // cmd_mux_005:sink2_ready -> cmd_demux_004:src3_ready
	wire   [12:0] cmd_demux_004_src3_channel;                                                                              // cmd_demux_004:src3_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_004_src3_startofpacket;                                                                        // cmd_demux_004:src3_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                                          // cmd_demux_004:src3_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src4_valid;                                                                                // cmd_demux_004:src4_valid -> cmd_mux_006:sink2_valid
	wire  [130:0] cmd_demux_004_src4_data;                                                                                 // cmd_demux_004:src4_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_004_src4_ready;                                                                                // cmd_mux_006:sink2_ready -> cmd_demux_004:src4_ready
	wire   [12:0] cmd_demux_004_src4_channel;                                                                              // cmd_demux_004:src4_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_004_src4_startofpacket;                                                                        // cmd_demux_004:src4_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                                          // cmd_demux_004:src4_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_004_src5_valid;                                                                                // cmd_demux_004:src5_valid -> cmd_mux_007:sink2_valid
	wire  [130:0] cmd_demux_004_src5_data;                                                                                 // cmd_demux_004:src5_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_004_src5_ready;                                                                                // cmd_mux_007:sink2_ready -> cmd_demux_004:src5_ready
	wire   [12:0] cmd_demux_004_src5_channel;                                                                              // cmd_demux_004:src5_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_004_src5_startofpacket;                                                                        // cmd_demux_004:src5_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_004_src5_endofpacket;                                                                          // cmd_demux_004:src5_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_004_src6_valid;                                                                                // cmd_demux_004:src6_valid -> cmd_mux_008:sink2_valid
	wire  [130:0] cmd_demux_004_src6_data;                                                                                 // cmd_demux_004:src6_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_004_src6_ready;                                                                                // cmd_mux_008:sink2_ready -> cmd_demux_004:src6_ready
	wire   [12:0] cmd_demux_004_src6_channel;                                                                              // cmd_demux_004:src6_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_004_src6_startofpacket;                                                                        // cmd_demux_004:src6_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_004_src6_endofpacket;                                                                          // cmd_demux_004:src6_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_004_src7_valid;                                                                                // cmd_demux_004:src7_valid -> cmd_mux_009:sink2_valid
	wire  [130:0] cmd_demux_004_src7_data;                                                                                 // cmd_demux_004:src7_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_004_src7_ready;                                                                                // cmd_mux_009:sink2_ready -> cmd_demux_004:src7_ready
	wire   [12:0] cmd_demux_004_src7_channel;                                                                              // cmd_demux_004:src7_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_004_src7_startofpacket;                                                                        // cmd_demux_004:src7_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_004_src7_endofpacket;                                                                          // cmd_demux_004:src7_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_004_src8_valid;                                                                                // cmd_demux_004:src8_valid -> cmd_mux_010:sink1_valid
	wire  [130:0] cmd_demux_004_src8_data;                                                                                 // cmd_demux_004:src8_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_004_src8_ready;                                                                                // cmd_mux_010:sink1_ready -> cmd_demux_004:src8_ready
	wire   [12:0] cmd_demux_004_src8_channel;                                                                              // cmd_demux_004:src8_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_004_src8_startofpacket;                                                                        // cmd_demux_004:src8_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_004_src8_endofpacket;                                                                          // cmd_demux_004:src8_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_004_src9_valid;                                                                                // cmd_demux_004:src9_valid -> cmd_mux_011:sink1_valid
	wire  [130:0] cmd_demux_004_src9_data;                                                                                 // cmd_demux_004:src9_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_004_src9_ready;                                                                                // cmd_mux_011:sink1_ready -> cmd_demux_004:src9_ready
	wire   [12:0] cmd_demux_004_src9_channel;                                                                              // cmd_demux_004:src9_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_004_src9_startofpacket;                                                                        // cmd_demux_004:src9_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_004_src9_endofpacket;                                                                          // cmd_demux_004:src9_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          rsp_demux_src2_valid;                                                                                    // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [130:0] rsp_demux_src2_data;                                                                                     // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                                    // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [12:0] rsp_demux_src2_channel;                                                                                  // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                                            // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                              // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [130:0] rsp_demux_002_src0_data;                                                                                 // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                                // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire   [12:0] rsp_demux_002_src0_channel;                                                                              // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                                // rsp_demux_002:src1_valid -> rsp_mux_003:sink0_valid
	wire  [130:0] rsp_demux_002_src1_data;                                                                                 // rsp_demux_002:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_002_src1_ready;                                                                                // rsp_mux_003:sink0_ready -> rsp_demux_002:src1_ready
	wire   [12:0] rsp_demux_002_src1_channel;                                                                              // rsp_demux_002:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                        // rsp_demux_002:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                          // rsp_demux_002:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src2_valid;                                                                                // rsp_demux_002:src2_valid -> rsp_mux_004:sink0_valid
	wire  [130:0] rsp_demux_002_src2_data;                                                                                 // rsp_demux_002:src2_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_002_src2_ready;                                                                                // rsp_mux_004:sink0_ready -> rsp_demux_002:src2_ready
	wire   [12:0] rsp_demux_002_src2_channel;                                                                              // rsp_demux_002:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_002_src2_startofpacket;                                                                        // rsp_demux_002:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                                          // rsp_demux_002:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire  [130:0] rsp_demux_003_src0_data;                                                                                 // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                                // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire   [12:0] rsp_demux_003_src0_channel;                                                                              // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                        // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                          // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                                // rsp_demux_003:src1_valid -> rsp_mux_003:sink1_valid
	wire  [130:0] rsp_demux_003_src1_data;                                                                                 // rsp_demux_003:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_003_src1_ready;                                                                                // rsp_mux_003:sink1_ready -> rsp_demux_003:src1_ready
	wire   [12:0] rsp_demux_003_src1_channel;                                                                              // rsp_demux_003:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src1_startofpacket;                                                                        // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                          // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                                                // rsp_demux_003:src2_valid -> rsp_mux_004:sink1_valid
	wire  [130:0] rsp_demux_003_src2_data;                                                                                 // rsp_demux_003:src2_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_003_src2_ready;                                                                                // rsp_mux_004:sink1_ready -> rsp_demux_003:src2_ready
	wire   [12:0] rsp_demux_003_src2_channel;                                                                              // rsp_demux_003:src2_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_003_src2_startofpacket;                                                                        // rsp_demux_003:src2_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                                          // rsp_demux_003:src2_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire  [130:0] rsp_demux_004_src0_data;                                                                                 // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                                // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire   [12:0] rsp_demux_004_src0_channel;                                                                              // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                        // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                          // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                                // rsp_demux_004:src1_valid -> rsp_mux_003:sink2_valid
	wire  [130:0] rsp_demux_004_src1_data;                                                                                 // rsp_demux_004:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_004_src1_ready;                                                                                // rsp_mux_003:sink2_ready -> rsp_demux_004:src1_ready
	wire   [12:0] rsp_demux_004_src1_channel;                                                                              // rsp_demux_004:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_004_src1_startofpacket;                                                                        // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                          // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                                // rsp_demux_004:src2_valid -> rsp_mux_004:sink2_valid
	wire  [130:0] rsp_demux_004_src2_data;                                                                                 // rsp_demux_004:src2_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_004_src2_ready;                                                                                // rsp_mux_004:sink2_ready -> rsp_demux_004:src2_ready
	wire   [12:0] rsp_demux_004_src2_channel;                                                                              // rsp_demux_004:src2_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_004_src2_startofpacket;                                                                        // rsp_demux_004:src2_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                                          // rsp_demux_004:src2_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                // rsp_demux_005:src0_valid -> rsp_mux_002:sink5_valid
	wire  [130:0] rsp_demux_005_src0_data;                                                                                 // rsp_demux_005:src0_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                                // rsp_mux_002:sink5_ready -> rsp_demux_005:src0_ready
	wire   [12:0] rsp_demux_005_src0_channel;                                                                              // rsp_demux_005:src0_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                        // rsp_demux_005:src0_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                          // rsp_demux_005:src0_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                                // rsp_demux_005:src1_valid -> rsp_mux_003:sink3_valid
	wire  [130:0] rsp_demux_005_src1_data;                                                                                 // rsp_demux_005:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_005_src1_ready;                                                                                // rsp_mux_003:sink3_ready -> rsp_demux_005:src1_ready
	wire   [12:0] rsp_demux_005_src1_channel;                                                                              // rsp_demux_005:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_005_src1_startofpacket;                                                                        // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                          // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                                // rsp_demux_005:src2_valid -> rsp_mux_004:sink3_valid
	wire  [130:0] rsp_demux_005_src2_data;                                                                                 // rsp_demux_005:src2_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_005_src2_ready;                                                                                // rsp_mux_004:sink3_ready -> rsp_demux_005:src2_ready
	wire   [12:0] rsp_demux_005_src2_channel;                                                                              // rsp_demux_005:src2_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_005_src2_startofpacket;                                                                        // rsp_demux_005:src2_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                                          // rsp_demux_005:src2_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                                // rsp_demux_006:src0_valid -> rsp_mux_002:sink6_valid
	wire  [130:0] rsp_demux_006_src0_data;                                                                                 // rsp_demux_006:src0_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                                // rsp_mux_002:sink6_ready -> rsp_demux_006:src0_ready
	wire   [12:0] rsp_demux_006_src0_channel;                                                                              // rsp_demux_006:src0_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                                // rsp_demux_006:src1_valid -> rsp_mux_003:sink4_valid
	wire  [130:0] rsp_demux_006_src1_data;                                                                                 // rsp_demux_006:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_006_src1_ready;                                                                                // rsp_mux_003:sink4_ready -> rsp_demux_006:src1_ready
	wire   [12:0] rsp_demux_006_src1_channel;                                                                              // rsp_demux_006:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_006_src1_startofpacket;                                                                        // rsp_demux_006:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                          // rsp_demux_006:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                                // rsp_demux_006:src2_valid -> rsp_mux_004:sink4_valid
	wire  [130:0] rsp_demux_006_src2_data;                                                                                 // rsp_demux_006:src2_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_006_src2_ready;                                                                                // rsp_mux_004:sink4_ready -> rsp_demux_006:src2_ready
	wire   [12:0] rsp_demux_006_src2_channel;                                                                              // rsp_demux_006:src2_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_006_src2_startofpacket;                                                                        // rsp_demux_006:src2_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                                          // rsp_demux_006:src2_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                                // rsp_demux_007:src0_valid -> rsp_mux_002:sink7_valid
	wire  [130:0] rsp_demux_007_src0_data;                                                                                 // rsp_demux_007:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                                // rsp_mux_002:sink7_ready -> rsp_demux_007:src0_ready
	wire   [12:0] rsp_demux_007_src0_channel;                                                                              // rsp_demux_007:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                        // rsp_demux_007:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                          // rsp_demux_007:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                                // rsp_demux_007:src1_valid -> rsp_mux_003:sink5_valid
	wire  [130:0] rsp_demux_007_src1_data;                                                                                 // rsp_demux_007:src1_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_007_src1_ready;                                                                                // rsp_mux_003:sink5_ready -> rsp_demux_007:src1_ready
	wire   [12:0] rsp_demux_007_src1_channel;                                                                              // rsp_demux_007:src1_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_007_src1_startofpacket;                                                                        // rsp_demux_007:src1_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                          // rsp_demux_007:src1_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_007_src2_valid;                                                                                // rsp_demux_007:src2_valid -> rsp_mux_004:sink5_valid
	wire  [130:0] rsp_demux_007_src2_data;                                                                                 // rsp_demux_007:src2_data -> rsp_mux_004:sink5_data
	wire          rsp_demux_007_src2_ready;                                                                                // rsp_mux_004:sink5_ready -> rsp_demux_007:src2_ready
	wire   [12:0] rsp_demux_007_src2_channel;                                                                              // rsp_demux_007:src2_channel -> rsp_mux_004:sink5_channel
	wire          rsp_demux_007_src2_startofpacket;                                                                        // rsp_demux_007:src2_startofpacket -> rsp_mux_004:sink5_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                                          // rsp_demux_007:src2_endofpacket -> rsp_mux_004:sink5_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                                // rsp_demux_008:src0_valid -> rsp_mux_002:sink8_valid
	wire  [130:0] rsp_demux_008_src0_data;                                                                                 // rsp_demux_008:src0_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                                // rsp_mux_002:sink8_ready -> rsp_demux_008:src0_ready
	wire   [12:0] rsp_demux_008_src0_channel;                                                                              // rsp_demux_008:src0_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                        // rsp_demux_008:src0_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                          // rsp_demux_008:src0_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                                // rsp_demux_008:src1_valid -> rsp_mux_003:sink6_valid
	wire  [130:0] rsp_demux_008_src1_data;                                                                                 // rsp_demux_008:src1_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_008_src1_ready;                                                                                // rsp_mux_003:sink6_ready -> rsp_demux_008:src1_ready
	wire   [12:0] rsp_demux_008_src1_channel;                                                                              // rsp_demux_008:src1_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_008_src1_startofpacket;                                                                        // rsp_demux_008:src1_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                          // rsp_demux_008:src1_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_008_src2_valid;                                                                                // rsp_demux_008:src2_valid -> rsp_mux_004:sink6_valid
	wire  [130:0] rsp_demux_008_src2_data;                                                                                 // rsp_demux_008:src2_data -> rsp_mux_004:sink6_data
	wire          rsp_demux_008_src2_ready;                                                                                // rsp_mux_004:sink6_ready -> rsp_demux_008:src2_ready
	wire   [12:0] rsp_demux_008_src2_channel;                                                                              // rsp_demux_008:src2_channel -> rsp_mux_004:sink6_channel
	wire          rsp_demux_008_src2_startofpacket;                                                                        // rsp_demux_008:src2_startofpacket -> rsp_mux_004:sink6_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                                          // rsp_demux_008:src2_endofpacket -> rsp_mux_004:sink6_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                                // rsp_demux_009:src0_valid -> rsp_mux_002:sink9_valid
	wire  [130:0] rsp_demux_009_src0_data;                                                                                 // rsp_demux_009:src0_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                                // rsp_mux_002:sink9_ready -> rsp_demux_009:src0_ready
	wire   [12:0] rsp_demux_009_src0_channel;                                                                              // rsp_demux_009:src0_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                        // rsp_demux_009:src0_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                          // rsp_demux_009:src0_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                                // rsp_demux_009:src1_valid -> rsp_mux_003:sink7_valid
	wire  [130:0] rsp_demux_009_src1_data;                                                                                 // rsp_demux_009:src1_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_009_src1_ready;                                                                                // rsp_mux_003:sink7_ready -> rsp_demux_009:src1_ready
	wire   [12:0] rsp_demux_009_src1_channel;                                                                              // rsp_demux_009:src1_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_009_src1_startofpacket;                                                                        // rsp_demux_009:src1_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                                          // rsp_demux_009:src1_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_009_src2_valid;                                                                                // rsp_demux_009:src2_valid -> rsp_mux_004:sink7_valid
	wire  [130:0] rsp_demux_009_src2_data;                                                                                 // rsp_demux_009:src2_data -> rsp_mux_004:sink7_data
	wire          rsp_demux_009_src2_ready;                                                                                // rsp_mux_004:sink7_ready -> rsp_demux_009:src2_ready
	wire   [12:0] rsp_demux_009_src2_channel;                                                                              // rsp_demux_009:src2_channel -> rsp_mux_004:sink7_channel
	wire          rsp_demux_009_src2_startofpacket;                                                                        // rsp_demux_009:src2_startofpacket -> rsp_mux_004:sink7_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                                          // rsp_demux_009:src2_endofpacket -> rsp_mux_004:sink7_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                                // rsp_demux_010:src0_valid -> rsp_mux_003:sink8_valid
	wire  [130:0] rsp_demux_010_src0_data;                                                                                 // rsp_demux_010:src0_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_010_src0_ready;                                                                                // rsp_mux_003:sink8_ready -> rsp_demux_010:src0_ready
	wire   [12:0] rsp_demux_010_src0_channel;                                                                              // rsp_demux_010:src0_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                                // rsp_demux_010:src1_valid -> rsp_mux_004:sink8_valid
	wire  [130:0] rsp_demux_010_src1_data;                                                                                 // rsp_demux_010:src1_data -> rsp_mux_004:sink8_data
	wire          rsp_demux_010_src1_ready;                                                                                // rsp_mux_004:sink8_ready -> rsp_demux_010:src1_ready
	wire   [12:0] rsp_demux_010_src1_channel;                                                                              // rsp_demux_010:src1_channel -> rsp_mux_004:sink8_channel
	wire          rsp_demux_010_src1_startofpacket;                                                                        // rsp_demux_010:src1_startofpacket -> rsp_mux_004:sink8_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                                          // rsp_demux_010:src1_endofpacket -> rsp_mux_004:sink8_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                                // rsp_demux_011:src0_valid -> rsp_mux_003:sink9_valid
	wire  [130:0] rsp_demux_011_src0_data;                                                                                 // rsp_demux_011:src0_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_011_src0_ready;                                                                                // rsp_mux_003:sink9_ready -> rsp_demux_011:src0_ready
	wire   [12:0] rsp_demux_011_src0_channel;                                                                              // rsp_demux_011:src0_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                        // rsp_demux_011:src0_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                          // rsp_demux_011:src0_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                                // rsp_demux_011:src1_valid -> rsp_mux_004:sink9_valid
	wire  [130:0] rsp_demux_011_src1_data;                                                                                 // rsp_demux_011:src1_data -> rsp_mux_004:sink9_data
	wire          rsp_demux_011_src1_ready;                                                                                // rsp_mux_004:sink9_ready -> rsp_demux_011:src1_ready
	wire   [12:0] rsp_demux_011_src1_channel;                                                                              // rsp_demux_011:src1_channel -> rsp_mux_004:sink9_channel
	wire          rsp_demux_011_src1_startofpacket;                                                                        // rsp_demux_011:src1_startofpacket -> rsp_mux_004:sink9_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                                          // rsp_demux_011:src1_endofpacket -> rsp_mux_004:sink9_endofpacket
	wire          cmd_demux_src0_valid;                                                                                    // cmd_demux:src0_valid -> hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src0_data;                                                                                     // cmd_demux:src0_data -> hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                                    // hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire   [12:0] cmd_demux_src0_channel;                                                                                  // cmd_demux:src0_channel -> hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                            // cmd_demux:src0_startofpacket -> hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                              // cmd_demux:src0_endofpacket -> hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_valid;                                   // hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [130:0] hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_data;                                    // hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_ready;                                   // cmd_mux:sink0_ready -> hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_ready
	wire   [12:0] hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_channel;                                 // hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket;                           // hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket;                             // hps_0_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                    // cmd_demux:src1_valid -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src1_data;                                                                                     // cmd_demux:src1_data -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                                                    // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire   [12:0] cmd_demux_src1_channel;                                                                                  // cmd_demux:src1_channel -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                            // cmd_demux:src1_startofpacket -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                              // cmd_demux:src1_endofpacket -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid;                                         // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [112:0] hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data;                                          // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready;                                         // cmd_mux_001:sink0_ready -> hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [12:0] hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel;                                       // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                 // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                   // hps_0_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                // cmd_demux_001:src0_valid -> hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_001_src0_data;                                                                                 // cmd_demux_001:src0_data -> hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                                // hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [12:0] cmd_demux_001_src0_channel;                                                                              // cmd_demux_001:src0_channel -> hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                        // cmd_demux_001:src0_startofpacket -> hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                          // cmd_demux_001:src0_endofpacket -> hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_valid;                                   // hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [130:0] hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_data;                                    // hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_ready;                                   // cmd_mux:sink1_ready -> hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_ready
	wire   [12:0] hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_channel;                                 // hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket;                           // hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket;                             // hps_0_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                // cmd_demux_001:src1_valid -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_001_src1_data;                                                                                 // cmd_demux_001:src1_data -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                                // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [12:0] cmd_demux_001_src1_channel;                                                                              // cmd_demux_001:src1_channel -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                        // cmd_demux_001:src1_startofpacket -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                          // cmd_demux_001:src1_endofpacket -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid;                                         // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [112:0] hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data;                                          // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready;                                         // cmd_mux_001:sink1_ready -> hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [12:0] hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel;                                       // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                 // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                   // hps_0_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                                // cmd_demux_002:src1_valid -> JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_002_src1_data;                                                                                 // cmd_demux_002:src1_data -> JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src1_ready;                                                                                // JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src1_ready
	wire   [12:0] cmd_demux_002_src1_channel;                                                                              // cmd_demux_002:src1_channel -> JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                        // cmd_demux_002:src1_startofpacket -> JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                          // cmd_demux_002:src1_endofpacket -> JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid;                                      // JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink2_valid
	wire  [112:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data;                                       // JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink2_data
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready;                                      // cmd_mux_001:sink2_ready -> JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [12:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel;                                    // JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink2_channel
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                              // JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                // JTAG_To_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_003_src10_valid;                                                                               // cmd_demux_003:src10_valid -> hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_003_src10_data;                                                                                // cmd_demux_003:src10_data -> hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_data
	wire          cmd_demux_003_src10_ready;                                                                               // hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_ready -> cmd_demux_003:src10_ready
	wire   [12:0] cmd_demux_003_src10_channel;                                                                             // cmd_demux_003:src10_channel -> hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src10_startofpacket;                                                                       // cmd_demux_003:src10_startofpacket -> hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                                         // cmd_demux_003:src10_endofpacket -> hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_valid -> cmd_mux_012:sink0_valid
	wire  [112:0] hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data;          // hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_data -> cmd_mux_012:sink0_data
	wire          hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready;         // cmd_mux_012:sink0_ready -> hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_channel -> cmd_mux_012:sink0_channel
	wire          hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_004_src10_valid;                                                                               // cmd_demux_004:src10_valid -> hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_004_src10_data;                                                                                // cmd_demux_004:src10_data -> hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_data
	wire          cmd_demux_004_src10_ready;                                                                               // hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_ready -> cmd_demux_004:src10_ready
	wire   [12:0] cmd_demux_004_src10_channel;                                                                             // cmd_demux_004:src10_channel -> hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src10_startofpacket;                                                                       // cmd_demux_004:src10_startofpacket -> hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src10_endofpacket;                                                                         // cmd_demux_004:src10_endofpacket -> hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_valid -> cmd_mux_012:sink1_valid
	wire  [112:0] hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data;          // hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_data -> cmd_mux_012:sink1_data
	wire          hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready;         // cmd_mux_012:sink1_ready -> hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_ready
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_channel -> cmd_mux_012:sink1_channel
	wire          hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                    // rsp_demux:src0_valid -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_src0_data;                                                                                     // rsp_demux:src0_data -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                                    // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire   [12:0] rsp_demux_src0_channel;                                                                                  // rsp_demux:src0_channel -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                            // rsp_demux:src0_startofpacket -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                              // rsp_demux:src0_endofpacket -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                                   // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [166:0] onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                                    // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                                   // rsp_mux:sink0_ready -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [12:0] onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                                 // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                           // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                             // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                                    // rsp_demux:src1_valid -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_src1_data;                                                                                     // rsp_demux:src1_data -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                                    // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire   [12:0] rsp_demux_src1_channel;                                                                                  // rsp_demux:src1_channel -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                            // rsp_demux:src1_startofpacket -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                              // rsp_demux:src1_endofpacket -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                                   // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [166:0] onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                                    // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                                   // rsp_mux_001:sink0_ready -> Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [12:0] onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                                 // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                           // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                             // Onchip_SRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                // rsp_demux_001:src0_valid -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_001_src0_data;                                                                                 // rsp_demux_001:src0_data -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                                // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire   [12:0] rsp_demux_001_src0_channel;                                                                              // rsp_demux_001:src0_channel -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                        // rsp_demux_001:src0_startofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                          // rsp_demux_001:src0_endofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                                         // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire  [166:0] sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                                          // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                                         // rsp_mux:sink1_ready -> SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [12:0] sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                                       // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                                 // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                                   // SDRAM_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                                // rsp_demux_001:src1_valid -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_001_src1_data;                                                                                 // rsp_demux_001:src1_data -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                                // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire   [12:0] rsp_demux_001_src1_channel;                                                                              // rsp_demux_001:src1_channel -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                        // rsp_demux_001:src1_startofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                          // rsp_demux_001:src1_endofpacket -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                                         // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [166:0] sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                                          // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                                         // rsp_mux_001:sink1_ready -> SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [12:0] sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                                       // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                                 // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                                   // SDRAM_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                                // rsp_demux_001:src2_valid -> SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_001_src2_data;                                                                                 // rsp_demux_001:src2_data -> SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src2_ready;                                                                                // SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:in_ready -> rsp_demux_001:src2_ready
	wire   [12:0] rsp_demux_001_src2_channel;                                                                              // rsp_demux_001:src2_channel -> SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                                                        // rsp_demux_001:src2_startofpacket -> SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                                          // rsp_demux_001:src2_endofpacket -> SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid;                                      // SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink1_valid
	wire  [130:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data;                                       // SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:out_data -> rsp_mux_002:sink1_data
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready;                                      // rsp_mux_002:sink1_ready -> SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:out_ready
	wire   [12:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel;                                    // SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink1_channel
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket;                              // SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket;                                // SDRAM_s1_to_JTAG_To_FPGA_Bridge_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                                // rsp_demux_012:src0_valid -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_012_src0_data;                                                                                 // rsp_demux_012:src0_data -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_012_src0_ready;                                                                                // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_012:src0_ready
	wire   [12:0] rsp_demux_012_src0_channel;                                                                              // rsp_demux_012:src0_channel -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                                        // rsp_demux_012:src0_startofpacket -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                          // rsp_demux_012:src0_endofpacket -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid;         // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_003:sink10_valid
	wire  [130:0] to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data;          // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_003:sink10_data
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready;         // rsp_mux_003:sink10_ready -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_ready
	wire   [12:0] to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel;       // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_003:sink10_channel
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket; // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket;   // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                                // rsp_demux_012:src1_valid -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_valid
	wire  [112:0] rsp_demux_012_src1_data;                                                                                 // rsp_demux_012:src1_data -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_012_src1_ready;                                                                                // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_012:src1_ready
	wire   [12:0] rsp_demux_012_src1_channel;                                                                              // rsp_demux_012:src1_channel -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src1_startofpacket;                                                                        // rsp_demux_012:src1_startofpacket -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                                          // rsp_demux_012:src1_endofpacket -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid;         // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_004:sink10_valid
	wire  [130:0] to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data;          // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_004:sink10_data
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready;         // rsp_mux_004:sink10_ready -> to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_ready
	wire   [12:0] to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel;       // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_004:sink10_channel
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket; // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink10_startofpacket
	wire          to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket;   // to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink10_endofpacket
	wire   [12:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                                                          // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [12:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                                                          // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [12:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                                                       // JTAG_To_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [12:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                                       // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [12:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                                       // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire          onchip_sram_s1_agent_rdata_fifo_out_valid;                                                               // Onchip_SRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] onchip_sram_s1_agent_rdata_fifo_out_data;                                                                // Onchip_SRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          onchip_sram_s1_agent_rdata_fifo_out_ready;                                                               // avalon_st_adapter:in_0_ready -> Onchip_SRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                           // avalon_st_adapter:out_0_valid -> Onchip_SRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                            // avalon_st_adapter:out_0_data -> Onchip_SRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                           // Onchip_SRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                           // avalon_st_adapter:out_0_error -> Onchip_SRAM_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                                     // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                                      // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                                     // avalon_st_adapter_001:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                       // avalon_st_adapter_001:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                                                                        // avalon_st_adapter_001:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                       // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                       // avalon_st_adapter_001:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                                                          // SysID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                                                           // SysID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                                                          // avalon_st_adapter_002:in_0_ready -> SysID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                       // avalon_st_adapter_002:out_0_valid -> SysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                        // avalon_st_adapter_002:out_0_data -> SysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                       // SysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                       // avalon_st_adapter_002:out_0_error -> SysID_control_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                                                                      // LEDS_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                                                       // LEDS_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                                                      // avalon_st_adapter_003:in_0_ready -> LEDS_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                       // avalon_st_adapter_003:out_0_valid -> LEDS_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                        // avalon_st_adapter_003:out_0_data -> LEDS_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                       // LEDS_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                       // avalon_st_adapter_003:out_0_error -> LEDS_s1_agent:rdata_fifo_sink_error
	wire          hex0_1_s1_agent_rdata_fifo_out_valid;                                                                    // HEX0_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] hex0_1_s1_agent_rdata_fifo_out_data;                                                                     // HEX0_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          hex0_1_s1_agent_rdata_fifo_out_ready;                                                                    // avalon_st_adapter_004:in_0_ready -> HEX0_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                       // avalon_st_adapter_004:out_0_valid -> HEX0_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                        // avalon_st_adapter_004:out_0_data -> HEX0_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                       // HEX0_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                       // avalon_st_adapter_004:out_0_error -> HEX0_1_s1_agent:rdata_fifo_sink_error
	wire          hex2_3_s1_agent_rdata_fifo_out_valid;                                                                    // HEX2_3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] hex2_3_s1_agent_rdata_fifo_out_data;                                                                     // HEX2_3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          hex2_3_s1_agent_rdata_fifo_out_ready;                                                                    // avalon_st_adapter_005:in_0_ready -> HEX2_3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                       // avalon_st_adapter_005:out_0_valid -> HEX2_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                        // avalon_st_adapter_005:out_0_data -> HEX2_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                       // HEX2_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                       // avalon_st_adapter_005:out_0_error -> HEX2_3_s1_agent:rdata_fifo_sink_error
	wire          hex4_5_s1_agent_rdata_fifo_out_valid;                                                                    // HEX4_5_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] hex4_5_s1_agent_rdata_fifo_out_data;                                                                     // HEX4_5_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          hex4_5_s1_agent_rdata_fifo_out_ready;                                                                    // avalon_st_adapter_006:in_0_ready -> HEX4_5_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                       // avalon_st_adapter_006:out_0_valid -> HEX4_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                        // avalon_st_adapter_006:out_0_data -> HEX4_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                       // HEX4_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                       // avalon_st_adapter_006:out_0_error -> HEX4_5_s1_agent:rdata_fifo_sink_error
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                                                           // Slider_Switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                                                            // Slider_Switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_007:in_0_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                       // avalon_st_adapter_007:out_0_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                        // avalon_st_adapter_007:out_0_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                       // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                       // avalon_st_adapter_007:out_0_error -> Slider_Switches_s1_agent:rdata_fifo_sink_error
	wire          pushbuttons_s1_agent_rdata_fifo_out_valid;                                                               // PushButtons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_out_data;                                                                // PushButtons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          pushbuttons_s1_agent_rdata_fifo_out_ready;                                                               // avalon_st_adapter_008:in_0_ready -> PushButtons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                       // avalon_st_adapter_008:out_0_valid -> PushButtons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                        // avalon_st_adapter_008:out_0_data -> PushButtons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                       // PushButtons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                       // avalon_st_adapter_008:out_0_error -> PushButtons_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_s1_agent_rdata_fifo_out_valid;                                                            // Interval_Timer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_out_data;                                                             // Interval_Timer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          interval_timer_s1_agent_rdata_fifo_out_ready;                                                            // avalon_st_adapter_009:in_0_ready -> Interval_Timer_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                       // avalon_st_adapter_009:out_0_valid -> Interval_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                        // avalon_st_adapter_009:out_0_data -> Interval_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                       // Interval_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                       // avalon_st_adapter_009:out_0_error -> Interval_Timer_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                                         // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_010:in_0_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                       // avalon_st_adapter_010:out_0_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                        // avalon_st_adapter_010:out_0_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                       // avalon_st_adapter_010:out_0_error -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data;                                         // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_011:in_0_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                       // avalon_st_adapter_011:out_0_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                                        // avalon_st_adapter_011:out_0_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                       // avalon_st_adapter_011:out_0_error -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_valid;                                        // to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [17:0] to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_data;                                         // to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_012:in_0_ready -> to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                                       // avalon_st_adapter_012:out_0_valid -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_012_out_0_data;                                                                        // avalon_st_adapter_012:out_0_data -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                                       // to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                                       // avalon_st_adapter_012:out_0_error -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (JTAG_To_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (JTAG_To_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (JTAG_To_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                (JTAG_To_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata            (JTAG_To_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (JTAG_To_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (JTAG_To_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata           (JTAG_To_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_sram_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_sram_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_sram_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_sram_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_sram_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_sram_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_sram_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_sram_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_sram_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_sram_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_sram_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Onchip_SRAM_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (Onchip_SRAM_s1_write),                           //                         .write
		.av_readdata            (Onchip_SRAM_s1_readdata),                        //                         .readdata
		.av_writedata           (Onchip_SRAM_s1_writedata),                       //                         .writedata
		.av_byteenable          (Onchip_SRAM_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (Onchip_SRAM_s1_chipselect),                      //                         .chipselect
		.av_clken               (Onchip_SRAM_s1_clken),                           //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                         //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (SDRAM_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                 //                         .write
		.av_read                (SDRAM_s1_read),                                  //                         .read
		.av_readdata            (SDRAM_s1_readdata),                              //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                             //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                            //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                         //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                           //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                            //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),              //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (SysID_control_slave_address),                    //      avalon_anti_slave_0.address
		.av_readdata            (SysID_control_slave_readdata),                   //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                          //                         .read
		.uav_write              (leds_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (LEDS_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (LEDS_s1_write),                                  //                         .write
		.av_readdata            (LEDS_s1_readdata),                               //                         .readdata
		.av_writedata           (LEDS_s1_writedata),                              //                         .writedata
		.av_chipselect          (LEDS_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex0_1_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex0_1_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hex0_1_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hex0_1_s1_agent_m0_read),                        //                         .read
		.uav_write              (hex0_1_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hex0_1_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hex0_1_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hex0_1_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hex0_1_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hex0_1_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hex0_1_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hex0_1_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (HEX0_1_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (HEX0_1_s1_write),                                //                         .write
		.av_readdata            (HEX0_1_s1_readdata),                             //                         .readdata
		.av_writedata           (HEX0_1_s1_writedata),                            //                         .writedata
		.av_chipselect          (HEX0_1_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex2_3_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex2_3_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hex2_3_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hex2_3_s1_agent_m0_read),                        //                         .read
		.uav_write              (hex2_3_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hex2_3_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hex2_3_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hex2_3_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hex2_3_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hex2_3_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hex2_3_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hex2_3_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (HEX2_3_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (HEX2_3_s1_write),                                //                         .write
		.av_readdata            (HEX2_3_s1_readdata),                             //                         .readdata
		.av_writedata           (HEX2_3_s1_writedata),                            //                         .writedata
		.av_chipselect          (HEX2_3_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex4_5_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex4_5_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hex4_5_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hex4_5_s1_agent_m0_read),                        //                         .read
		.uav_write              (hex4_5_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hex4_5_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hex4_5_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hex4_5_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hex4_5_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hex4_5_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hex4_5_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hex4_5_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (HEX4_5_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (HEX4_5_s1_write),                                //                         .write
		.av_readdata            (HEX4_5_s1_readdata),                             //                         .readdata
		.av_writedata           (HEX4_5_s1_writedata),                            //                         .writedata
		.av_chipselect          (HEX4_5_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (slider_switches_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (slider_switches_s1_agent_m0_read),               //                         .read
		.uav_write              (slider_switches_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (slider_switches_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (slider_switches_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (slider_switches_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (slider_switches_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (slider_switches_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (slider_switches_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (slider_switches_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (Slider_Switches_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (Slider_Switches_s1_readdata),                    //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),                   //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (PushButtons_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (PushButtons_s1_write),                           //                         .write
		.av_readdata            (PushButtons_s1_readdata),                        //                         .readdata
		.av_writedata           (PushButtons_s1_writedata),                       //                         .writedata
		.av_chipselect          (PushButtons_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                         //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (interval_timer_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (interval_timer_s1_agent_m0_read),                //                         .read
		.uav_write              (interval_timer_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (interval_timer_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (interval_timer_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (interval_timer_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (interval_timer_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (interval_timer_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (interval_timer_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (interval_timer_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (Interval_Timer_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_s1_write),                        //                         .write
		.av_readdata            (Interval_Timer_s1_readdata),                     //                         .readdata
		.av_writedata           (Interval_Timer_s1_writedata),                    //                         .writedata
		.av_chipselect          (Interval_Timer_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_for_ARM_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_for_ARM_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_for_ARM_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_for_ARM_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_for_ARM_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_for_ARM_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_for_ARM_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_for_ARM_1_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_for_ARM_1_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_for_ARM_1_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_for_ARM_1_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_for_ARM_1_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_for_ARM_1_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_for_ARM_1_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_external_bus_bridge_0_avalon_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (to_external_bus_bridge_0_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (to_external_bus_bridge_0_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (to_external_bus_bridge_0_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (to_external_bus_bridge_0_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (to_external_bus_bridge_0_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (to_external_bus_bridge_0_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (to_external_bus_bridge_0_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (to_external_bus_bridge_0_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (to_external_bus_bridge_0_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (to_external_bus_bridge_0_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (to_external_bus_bridge_0_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (to_external_bus_bridge_0_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (to_external_bus_bridge_0_avalon_slave_write),                  //                         .write
		.av_read                (to_external_bus_bridge_0_avalon_slave_read),                   //                         .read
		.av_readdata            (to_external_bus_bridge_0_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (to_external_bus_bridge_0_avalon_slave_writedata),              //                         .writedata
		.av_byteenable          (to_external_bus_bridge_0_avalon_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (to_external_bus_bridge_0_avalon_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (to_external_bus_bridge_0_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (133),
		.PKT_CACHE_H               (161),
		.PKT_CACHE_L               (158),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_THREAD_ID_H           (154),
		.PKT_THREAD_ID_L           (143),
		.PKT_QOS_L                 (134),
		.PKT_QOS_H                 (134),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (13),
		.ID                        (1)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                            //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (97),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_QOS_L                 (98),
		.PKT_QOS_H                 (98),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.ID                        (2)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                            //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                  //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                   //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                  //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                  //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                   //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                  //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_sram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_sram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_sram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_sram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_sram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_sram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_sram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_sram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_sram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_sram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_sram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_sram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_sram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_sram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_sram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_sram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_sram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_sram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_sram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_sram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_sram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_sram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_sram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_sram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_sram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_sram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_sram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_sram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_sram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_sram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (onchip_sram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_sram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_sram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_sram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_sram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_sram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_sram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_sram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_sram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_sram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_sram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_sram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_sram_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (onchip_sram_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (onchip_sram_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (onchip_sram_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (onchip_sram_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (onchip_sram_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                  //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex0_1_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex0_1_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hex0_1_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hex0_1_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hex0_1_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hex0_1_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (hex0_1_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hex0_1_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hex0_1_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (hex0_1_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hex0_1_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (hex0_1_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (hex0_1_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hex0_1_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (hex0_1_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (hex0_1_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (hex0_1_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (hex0_1_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (hex0_1_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (hex0_1_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (hex0_1_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (hex0_1_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (hex0_1_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (hex0_1_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hex0_1_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hex0_1_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hex0_1_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hex0_1_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hex0_1_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hex0_1_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hex0_1_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hex0_1_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hex0_1_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hex0_1_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex0_1_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hex0_1_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex0_1_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex0_1_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (hex0_1_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (hex0_1_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hex0_1_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hex0_1_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hex0_1_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hex0_1_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hex0_1_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hex0_1_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hex0_1_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex0_1_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex0_1_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (hex0_1_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (hex0_1_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (hex0_1_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (hex0_1_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (hex0_1_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex2_3_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex2_3_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hex2_3_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hex2_3_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hex2_3_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hex2_3_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (hex2_3_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hex2_3_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hex2_3_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (hex2_3_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hex2_3_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (hex2_3_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (hex2_3_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hex2_3_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (hex2_3_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (hex2_3_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (hex2_3_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (hex2_3_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (hex2_3_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (hex2_3_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (hex2_3_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (hex2_3_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (hex2_3_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (hex2_3_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hex2_3_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hex2_3_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hex2_3_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hex2_3_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hex2_3_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hex2_3_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hex2_3_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hex2_3_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hex2_3_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hex2_3_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex2_3_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hex2_3_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex2_3_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex2_3_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (hex2_3_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (hex2_3_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hex2_3_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hex2_3_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hex2_3_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hex2_3_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hex2_3_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hex2_3_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hex2_3_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex2_3_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex2_3_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (hex2_3_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (hex2_3_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (hex2_3_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (hex2_3_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (hex2_3_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex4_5_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex4_5_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hex4_5_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hex4_5_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hex4_5_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hex4_5_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (hex4_5_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hex4_5_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hex4_5_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (hex4_5_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hex4_5_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (hex4_5_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (hex4_5_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hex4_5_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (hex4_5_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (hex4_5_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (hex4_5_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (hex4_5_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (hex4_5_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (hex4_5_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (hex4_5_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (hex4_5_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (hex4_5_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (hex4_5_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hex4_5_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hex4_5_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hex4_5_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hex4_5_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hex4_5_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hex4_5_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hex4_5_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hex4_5_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hex4_5_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hex4_5_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex4_5_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hex4_5_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex4_5_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex4_5_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (hex4_5_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (hex4_5_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hex4_5_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hex4_5_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hex4_5_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hex4_5_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hex4_5_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hex4_5_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hex4_5_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex4_5_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex4_5_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (hex4_5_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (hex4_5_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (hex4_5_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (hex4_5_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (hex4_5_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (slider_switches_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (slider_switches_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (slider_switches_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (slider_switches_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (slider_switches_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (slider_switches_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pushbuttons_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pushbuttons_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pushbuttons_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pushbuttons_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pushbuttons_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pushbuttons_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (pushbuttons_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (pushbuttons_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (pushbuttons_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (pushbuttons_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (pushbuttons_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (interval_timer_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (interval_timer_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (interval_timer_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (interval_timer_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (interval_timer_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (interval_timer_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (interval_timer_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (interval_timer_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (interval_timer_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (interval_timer_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (interval_timer_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (interval_timer_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (interval_timer_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (interval_timer_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (interval_timer_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (interval_timer_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (interval_timer_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (interval_timer_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (interval_timer_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (interval_timer_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (interval_timer_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (interval_timer_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (interval_timer_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (interval_timer_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (interval_timer_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (interval_timer_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (interval_timer_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (interval_timer_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (interval_timer_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (interval_timer_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (interval_timer_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (interval_timer_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (interval_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (interval_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (interval_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (interval_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (interval_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (interval_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (interval_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (interval_timer_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (interval_timer_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (interval_timer_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (interval_timer_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (interval_timer_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (85),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_external_bus_bridge_0_avalon_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (to_external_bus_bridge_0_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (to_external_bus_bridge_0_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (to_external_bus_bridge_0_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (to_external_bus_bridge_0_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (to_external_bus_bridge_0_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (to_external_bus_bridge_0_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (to_external_bus_bridge_0_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (to_external_bus_bridge_0_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (to_external_bus_bridge_0_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (to_external_bus_bridge_0_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (to_external_bus_bridge_0_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (to_external_bus_bridge_0_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (to_external_bus_bridge_0_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (to_external_bus_bridge_0_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (to_external_bus_bridge_0_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (to_external_bus_bridge_0_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (to_external_bus_bridge_0_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (to_external_bus_bridge_0_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (to_external_bus_bridge_0_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (to_external_bus_bridge_0_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (to_external_bus_bridge_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (to_external_bus_bridge_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (to_external_bus_bridge_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_external_bus_bridge_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_external_bus_bridge_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	CPEN_Computer_V1_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),         //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),          //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //       src.ready
		.src_valid          (router_003_src_valid),                                             //          .valid
		.src_data           (router_003_src_data),                                              //          .data
		.src_channel        (router_003_src_channel),                                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                             //       src.ready
		.src_valid          (router_004_src_valid),                                             //          .valid
		.src_data           (router_004_src_data),                                              //          .data
		.src_channel        (router_004_src_channel),                                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                        //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (onchip_sram_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_sram_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_sram_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_sram_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_sram_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (sdram_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                        //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),             //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),              //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (leds_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                         //          .valid
		.sink_data          (leds_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_009 (
		.sink_ready         (hex0_1_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hex0_1_s1_agent_rp_valid),                       //          .valid
		.sink_data          (hex0_1_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (hex0_1_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hex0_1_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_010 (
		.sink_ready         (hex2_3_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hex2_3_s1_agent_rp_valid),                       //          .valid
		.sink_data          (hex2_3_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (hex2_3_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hex2_3_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_011 (
		.sink_ready         (hex4_5_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hex4_5_s1_agent_rp_valid),                       //          .valid
		.sink_data          (hex4_5_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (hex4_5_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hex4_5_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_012 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),              //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),               //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_013 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),                  //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_007 router_014 (
		.sink_ready         (interval_timer_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (interval_timer_s1_agent_rp_valid),               //          .valid
		.sink_data          (interval_timer_s1_agent_rp_data),                //          .data
		.sink_startofpacket (interval_timer_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (interval_timer_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_015 router_015 (
		.sink_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_015_src_ready),                                         //       src.ready
		.src_valid          (router_015_src_valid),                                         //          .valid
		.src_data           (router_015_src_data),                                          //          .data
		.src_channel        (router_015_src_channel),                                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                    //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_015 router_016 (
		.sink_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_016_src_ready),                                         //       src.ready
		.src_valid          (router_016_src_valid),                                         //          .valid
		.src_data           (router_016_src_data),                                          //          .data
		.src_channel        (router_016_src_channel),                                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                    //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (to_external_bus_bridge_0_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (to_external_bus_bridge_0_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (to_external_bus_bridge_0_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (to_external_bus_bridge_0_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_017_src_ready),                                         //       src.ready
		.src_valid          (router_017_src_valid),                                         //          .valid
		.src_data           (router_017_src_data),                                          //          .data
		.src_channel        (router_017_src_channel),                                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset                  (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),           // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                     //          .valid
		.cmd_sink_data          (router_002_src_data),                                      //          .data
		.cmd_sink_channel       (router_002_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                             //          .valid
		.cmd_sink_data          (router_003_src_data),                                              //          .data
		.cmd_sink_channel       (router_003_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                             //          .valid
		.cmd_sink_data          (router_004_src_data),                                              //          .data
		.cmd_sink_channel       (router_004_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_sram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                  //          .ready
		.source0_valid         (onchip_sram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_sram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_sram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_sram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_sram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_sram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                           //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                          //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                  //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                           //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                          //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex0_1_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                           //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                          //          .ready
		.source0_valid         (hex0_1_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (hex0_1_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (hex0_1_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (hex0_1_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (hex0_1_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (hex0_1_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex2_3_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                           //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                          //          .ready
		.source0_valid         (hex2_3_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (hex2_3_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (hex2_3_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (hex2_3_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (hex2_3_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (hex2_3_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex4_5_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                           //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                          //          .ready
		.source0_valid         (hex4_5_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (hex4_5_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (hex4_5_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (hex4_5_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (hex4_5_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (hex4_5_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) slider_switches_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                 //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                  //          .ready
		.source0_valid         (slider_switches_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (slider_switches_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (slider_switches_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (slider_switches_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (slider_switches_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (slider_switches_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pushbuttons_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                               //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                              //          .ready
		.source0_valid         (pushbuttons_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pushbuttons_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pushbuttons_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pushbuttons_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pushbuttons_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pushbuttons_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) interval_timer_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                 //          .ready
		.source0_valid         (interval_timer_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (interval_timer_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (interval_timer_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (interval_timer_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (interval_timer_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (interval_timer_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                                     //          .ready
		.source0_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                                     //          .ready
		.source0_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (13),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) to_external_bus_bridge_0_avalon_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                                     //          .ready
		.source0_valid         (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (System_PLL_sys_clk_clk),                                           //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                        //           .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                                           //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                    //           .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                                   //        clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),           //  clk_reset.reset
		.sink_ready         (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                 //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                 //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                  //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                               //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                           //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                 //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                 //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                  //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                               //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                           //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                 //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                 //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                  //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                               //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                           //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                 //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                 //           .valid
		.src3_data          (cmd_demux_002_src3_data),                                  //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                               //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                           //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                 //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                 //           .valid
		.src4_data          (cmd_demux_002_src4_data),                                  //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                               //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                           //           .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                                 //       src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                                 //           .valid
		.src5_data          (cmd_demux_002_src5_data),                                  //           .data
		.src5_channel       (cmd_demux_002_src5_channel),                               //           .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket),                           //           .endofpacket
		.src6_ready         (cmd_demux_002_src6_ready),                                 //       src6.ready
		.src6_valid         (cmd_demux_002_src6_valid),                                 //           .valid
		.src6_data          (cmd_demux_002_src6_data),                                  //           .data
		.src6_channel       (cmd_demux_002_src6_channel),                               //           .channel
		.src6_startofpacket (cmd_demux_002_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket   (cmd_demux_002_src6_endofpacket),                           //           .endofpacket
		.src7_ready         (cmd_demux_002_src7_ready),                                 //       src7.ready
		.src7_valid         (cmd_demux_002_src7_valid),                                 //           .valid
		.src7_data          (cmd_demux_002_src7_data),                                  //           .data
		.src7_channel       (cmd_demux_002_src7_channel),                               //           .channel
		.src7_startofpacket (cmd_demux_002_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket   (cmd_demux_002_src7_endofpacket),                           //           .endofpacket
		.src8_ready         (cmd_demux_002_src8_ready),                                 //       src8.ready
		.src8_valid         (cmd_demux_002_src8_valid),                                 //           .valid
		.src8_data          (cmd_demux_002_src8_data),                                  //           .data
		.src8_channel       (cmd_demux_002_src8_channel),                               //           .channel
		.src8_startofpacket (cmd_demux_002_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket   (cmd_demux_002_src8_endofpacket),                           //           .endofpacket
		.src9_ready         (cmd_demux_002_src9_ready),                                 //       src9.ready
		.src9_valid         (cmd_demux_002_src9_valid),                                 //           .valid
		.src9_data          (cmd_demux_002_src9_data),                                  //           .data
		.src9_channel       (cmd_demux_002_src9_channel),                               //           .channel
		.src9_startofpacket (cmd_demux_002_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket   (cmd_demux_002_src9_endofpacket)                            //           .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                 (System_PLL_sys_clk_clk),                                           //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_003_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_003_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_003_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_003_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_003_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_003_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_003_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_003_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_003_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_003_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_003_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_003_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_003_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_003_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_003_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_003_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_003_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_003_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_003_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_003_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_003_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_003_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_003_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket)                                   //           .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                 (System_PLL_sys_clk_clk),                                           //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_004_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_004_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_004_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_004_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_004_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_004_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_004_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_004_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_004_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_004_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_004_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_004_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_004_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_004_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_004_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_004_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_004_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_004_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_004_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_004_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_004_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_004_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_004_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_004_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_004_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_004_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_004_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_004_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_004_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_004_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_004_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_004_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_004_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_004_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_004_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_004_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_004_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_004_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_004_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_004_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_004_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_004_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_004_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_004_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_004_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_004_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_004_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_004_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_004_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_004_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_004_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_004_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_004_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_004_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_004_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_004_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_004_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_004_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_004_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_004_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_004_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_004_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_004_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_004_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_004_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_004_src10_endofpacket)                                   //           .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                             //          .valid
		.src_data            (cmd_mux_src_data),                                                              //          .data
		.src_channel         (cmd_mux_src_channel),                                                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                       //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                      //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                                    //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                       //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                                                 //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),            //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),            //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),          //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),             //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket),    //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),      //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),            //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),            //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),          //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),             //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),      //          .endofpacket
		.sink2_ready         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src1_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src1_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src1_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src1_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src1_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src2_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src2_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src2_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src2_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src2_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src5_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src5_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src5_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src5_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src5_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src5_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src3_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src3_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src3_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src3_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src3_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src3_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src6_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src6_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src6_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src6_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src6_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src6_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src4_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src4_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src4_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src4_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src4_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src4_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src7_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src5_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src5_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src5_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src5_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src5_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src5_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src5_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src5_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src5_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src5_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src5_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src5_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src8_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src8_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src8_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src8_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src8_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src8_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src6_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src6_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src6_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src6_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src6_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src6_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src6_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src6_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src6_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src6_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src6_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src6_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_mux_009_src_data),                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_002_src9_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src9_valid),                       //          .valid
		.sink0_channel       (cmd_demux_002_src9_channel),                     //          .channel
		.sink0_data          (cmd_demux_002_src9_data),                        //          .data
		.sink0_startofpacket (cmd_demux_002_src9_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src9_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src7_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src7_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src7_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src7_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src7_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src7_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src7_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src7_valid),                       //          .valid
		.sink2_channel       (cmd_demux_004_src7_channel),                     //          .channel
		.sink2_data          (cmd_demux_004_src7_data),                        //          .data
		.sink2_startofpacket (cmd_demux_004_src7_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src7_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux_010 cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_mux_010_src_data),                           //          .data
		.src_channel         (cmd_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src8_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src8_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src8_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src8_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src8_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src8_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_004_src8_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_004_src8_valid),                       //          .valid
		.sink1_channel       (cmd_demux_004_src8_channel),                     //          .channel
		.sink1_data          (cmd_demux_004_src8_data),                        //          .data
		.sink1_startofpacket (cmd_demux_004_src8_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src8_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux_010 cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                          //          .valid
		.src_data            (cmd_mux_011_src_data),                           //          .data
		.src_channel         (cmd_mux_011_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src9_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src9_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src9_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src9_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src9_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src9_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_004_src9_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_004_src9_valid),                       //          .valid
		.sink1_channel       (cmd_demux_004_src9_channel),                     //          .channel
		.sink1_data          (cmd_demux_004_src9_data),                        //          .data
		.sink1_startofpacket (cmd_demux_004_src9_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src9_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_cmd_mux_012 cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                                          // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                                                   //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                                                   //          .valid
		.src_data            (cmd_mux_012_src_data),                                                                                    //          .data
		.src_channel         (cmd_mux_012_src_channel),                                                                                 //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                                                             //          .endofpacket
		.sink0_ready         (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_src1_data),                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                           //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                           //          .valid
		.src2_data          (rsp_demux_src2_data),                            //          .data
		.src2_channel       (rsp_demux_src2_channel),                         //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                      //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_001_src2_data),                        //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_002_src2_data),                        //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_003_src2_data),                        //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_004_src2_data),                        //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_005_src2_data),                        //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_006_src1_data),                        //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_006_src2_data),                        //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_007_src1_data),                        //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_007_src2_data),                        //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_008_src1_data),                        //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_008_src2_data),                        //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //      sink.ready
		.sink_channel       (router_014_src_channel),                         //          .channel
		.sink_data          (router_014_src_data),                            //          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_014_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_009_src1_data),                        //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_009_src2_data),                        //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux_010 rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //      sink.ready
		.sink_channel       (router_015_src_channel),                         //          .channel
		.sink_data          (router_015_src_data),                            //          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_015_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_010_src1_data),                        //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux_010 rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                           //      sink.ready
		.sink_channel       (router_016_src_channel),                         //          .channel
		.sink_data          (router_016_src_data),                            //          .data
		.sink_startofpacket (router_016_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_016_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_011_src1_data),                        //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_demux_012 rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset              (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                           //      sink.ready
		.sink_channel       (router_017_src_channel),                         //          .channel
		.sink_data          (router_017_src_data),                            //          .data
		.sink_startofpacket (router_017_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_017_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_012_src0_data),                        //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_012_src1_data),                        //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                  //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                             //          .valid
		.src_data            (rsp_mux_src_data),                                                              //          .data
		.src_channel         (rsp_mux_src_channel),                                                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                       //          .endofpacket
		.sink0_ready         (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),               //     sink1.ready
		.sink1_valid         (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),               //          .valid
		.sink1_channel       (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),             //          .channel
		.sink1_data          (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                //          .data
		.sink1_startofpacket (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket)          //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                         //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                         //          .valid
		.src_data            (rsp_mux_001_src_data),                                                          //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                       //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),               //     sink1.ready
		.sink1_valid         (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),               //          .valid
		.sink1_channel       (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),             //          .channel
		.sink1_data          (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                //          .data
		.sink1_startofpacket (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket)          //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset               (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                      //          .valid
		.src_data            (rsp_mux_002_src_data),                                                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                                                       //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                                                     //          .channel
		.sink0_data          (rsp_demux_src2_data),                                                        //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),                                                 //          .endofpacket
		.sink1_ready         (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                   //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                   //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                 //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                    //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                           //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                             //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                   //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                   //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                 //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                    //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                           //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                             //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                   //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                   //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                 //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                    //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                           //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                             //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                                   //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                                   //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                                 //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                                    //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                           //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                             //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                   //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                   //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                                 //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                    //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                           //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                             //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                                   //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                                   //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                                 //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                                    //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                           //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                             //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                                   //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                                   //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                                                 //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                                    //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                                           //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),                                             //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                                                   //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                                                   //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                                                 //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                                                    //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),                                           //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)                                              //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                  (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                                                                   //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                                                                   //          .valid
		.src_data             (rsp_mux_003_src_data),                                                                                    //          .data
		.src_channel          (rsp_mux_003_src_channel),                                                                                 //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                                                           //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                                                             //          .endofpacket
		.sink0_ready          (rsp_demux_002_src1_ready),                                                                                //     sink0.ready
		.sink0_valid          (rsp_demux_002_src1_valid),                                                                                //          .valid
		.sink0_channel        (rsp_demux_002_src1_channel),                                                                              //          .channel
		.sink0_data           (rsp_demux_002_src1_data),                                                                                 //          .data
		.sink0_startofpacket  (rsp_demux_002_src1_startofpacket),                                                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_002_src1_endofpacket),                                                                          //          .endofpacket
		.sink1_ready          (rsp_demux_003_src1_ready),                                                                                //     sink1.ready
		.sink1_valid          (rsp_demux_003_src1_valid),                                                                                //          .valid
		.sink1_channel        (rsp_demux_003_src1_channel),                                                                              //          .channel
		.sink1_data           (rsp_demux_003_src1_data),                                                                                 //          .data
		.sink1_startofpacket  (rsp_demux_003_src1_startofpacket),                                                                        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_003_src1_endofpacket),                                                                          //          .endofpacket
		.sink2_ready          (rsp_demux_004_src1_ready),                                                                                //     sink2.ready
		.sink2_valid          (rsp_demux_004_src1_valid),                                                                                //          .valid
		.sink2_channel        (rsp_demux_004_src1_channel),                                                                              //          .channel
		.sink2_data           (rsp_demux_004_src1_data),                                                                                 //          .data
		.sink2_startofpacket  (rsp_demux_004_src1_startofpacket),                                                                        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src1_endofpacket),                                                                          //          .endofpacket
		.sink3_ready          (rsp_demux_005_src1_ready),                                                                                //     sink3.ready
		.sink3_valid          (rsp_demux_005_src1_valid),                                                                                //          .valid
		.sink3_channel        (rsp_demux_005_src1_channel),                                                                              //          .channel
		.sink3_data           (rsp_demux_005_src1_data),                                                                                 //          .data
		.sink3_startofpacket  (rsp_demux_005_src1_startofpacket),                                                                        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src1_endofpacket),                                                                          //          .endofpacket
		.sink4_ready          (rsp_demux_006_src1_ready),                                                                                //     sink4.ready
		.sink4_valid          (rsp_demux_006_src1_valid),                                                                                //          .valid
		.sink4_channel        (rsp_demux_006_src1_channel),                                                                              //          .channel
		.sink4_data           (rsp_demux_006_src1_data),                                                                                 //          .data
		.sink4_startofpacket  (rsp_demux_006_src1_startofpacket),                                                                        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src1_endofpacket),                                                                          //          .endofpacket
		.sink5_ready          (rsp_demux_007_src1_ready),                                                                                //     sink5.ready
		.sink5_valid          (rsp_demux_007_src1_valid),                                                                                //          .valid
		.sink5_channel        (rsp_demux_007_src1_channel),                                                                              //          .channel
		.sink5_data           (rsp_demux_007_src1_data),                                                                                 //          .data
		.sink5_startofpacket  (rsp_demux_007_src1_startofpacket),                                                                        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src1_endofpacket),                                                                          //          .endofpacket
		.sink6_ready          (rsp_demux_008_src1_ready),                                                                                //     sink6.ready
		.sink6_valid          (rsp_demux_008_src1_valid),                                                                                //          .valid
		.sink6_channel        (rsp_demux_008_src1_channel),                                                                              //          .channel
		.sink6_data           (rsp_demux_008_src1_data),                                                                                 //          .data
		.sink6_startofpacket  (rsp_demux_008_src1_startofpacket),                                                                        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src1_endofpacket),                                                                          //          .endofpacket
		.sink7_ready          (rsp_demux_009_src1_ready),                                                                                //     sink7.ready
		.sink7_valid          (rsp_demux_009_src1_valid),                                                                                //          .valid
		.sink7_channel        (rsp_demux_009_src1_channel),                                                                              //          .channel
		.sink7_data           (rsp_demux_009_src1_data),                                                                                 //          .data
		.sink7_startofpacket  (rsp_demux_009_src1_startofpacket),                                                                        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src1_endofpacket),                                                                          //          .endofpacket
		.sink8_ready          (rsp_demux_010_src0_ready),                                                                                //     sink8.ready
		.sink8_valid          (rsp_demux_010_src0_valid),                                                                                //          .valid
		.sink8_channel        (rsp_demux_010_src0_channel),                                                                              //          .channel
		.sink8_data           (rsp_demux_010_src0_data),                                                                                 //          .data
		.sink8_startofpacket  (rsp_demux_010_src0_startofpacket),                                                                        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src0_endofpacket),                                                                          //          .endofpacket
		.sink9_ready          (rsp_demux_011_src0_ready),                                                                                //     sink9.ready
		.sink9_valid          (rsp_demux_011_src0_valid),                                                                                //          .valid
		.sink9_channel        (rsp_demux_011_src0_channel),                                                                              //          .channel
		.sink9_data           (rsp_demux_011_src0_data),                                                                                 //          .data
		.sink9_startofpacket  (rsp_demux_011_src0_startofpacket),                                                                        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src0_endofpacket),                                                                          //          .endofpacket
		.sink10_ready         (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //    sink10.ready
		.sink10_valid         (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink10_channel       (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink10_data          (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink10_startofpacket (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink10_endofpacket   (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	CPEN_Computer_V1_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                  (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready            (rsp_mux_004_src_ready),                                                                                   //       src.ready
		.src_valid            (rsp_mux_004_src_valid),                                                                                   //          .valid
		.src_data             (rsp_mux_004_src_data),                                                                                    //          .data
		.src_channel          (rsp_mux_004_src_channel),                                                                                 //          .channel
		.src_startofpacket    (rsp_mux_004_src_startofpacket),                                                                           //          .startofpacket
		.src_endofpacket      (rsp_mux_004_src_endofpacket),                                                                             //          .endofpacket
		.sink0_ready          (rsp_demux_002_src2_ready),                                                                                //     sink0.ready
		.sink0_valid          (rsp_demux_002_src2_valid),                                                                                //          .valid
		.sink0_channel        (rsp_demux_002_src2_channel),                                                                              //          .channel
		.sink0_data           (rsp_demux_002_src2_data),                                                                                 //          .data
		.sink0_startofpacket  (rsp_demux_002_src2_startofpacket),                                                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_002_src2_endofpacket),                                                                          //          .endofpacket
		.sink1_ready          (rsp_demux_003_src2_ready),                                                                                //     sink1.ready
		.sink1_valid          (rsp_demux_003_src2_valid),                                                                                //          .valid
		.sink1_channel        (rsp_demux_003_src2_channel),                                                                              //          .channel
		.sink1_data           (rsp_demux_003_src2_data),                                                                                 //          .data
		.sink1_startofpacket  (rsp_demux_003_src2_startofpacket),                                                                        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_003_src2_endofpacket),                                                                          //          .endofpacket
		.sink2_ready          (rsp_demux_004_src2_ready),                                                                                //     sink2.ready
		.sink2_valid          (rsp_demux_004_src2_valid),                                                                                //          .valid
		.sink2_channel        (rsp_demux_004_src2_channel),                                                                              //          .channel
		.sink2_data           (rsp_demux_004_src2_data),                                                                                 //          .data
		.sink2_startofpacket  (rsp_demux_004_src2_startofpacket),                                                                        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src2_endofpacket),                                                                          //          .endofpacket
		.sink3_ready          (rsp_demux_005_src2_ready),                                                                                //     sink3.ready
		.sink3_valid          (rsp_demux_005_src2_valid),                                                                                //          .valid
		.sink3_channel        (rsp_demux_005_src2_channel),                                                                              //          .channel
		.sink3_data           (rsp_demux_005_src2_data),                                                                                 //          .data
		.sink3_startofpacket  (rsp_demux_005_src2_startofpacket),                                                                        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src2_endofpacket),                                                                          //          .endofpacket
		.sink4_ready          (rsp_demux_006_src2_ready),                                                                                //     sink4.ready
		.sink4_valid          (rsp_demux_006_src2_valid),                                                                                //          .valid
		.sink4_channel        (rsp_demux_006_src2_channel),                                                                              //          .channel
		.sink4_data           (rsp_demux_006_src2_data),                                                                                 //          .data
		.sink4_startofpacket  (rsp_demux_006_src2_startofpacket),                                                                        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src2_endofpacket),                                                                          //          .endofpacket
		.sink5_ready          (rsp_demux_007_src2_ready),                                                                                //     sink5.ready
		.sink5_valid          (rsp_demux_007_src2_valid),                                                                                //          .valid
		.sink5_channel        (rsp_demux_007_src2_channel),                                                                              //          .channel
		.sink5_data           (rsp_demux_007_src2_data),                                                                                 //          .data
		.sink5_startofpacket  (rsp_demux_007_src2_startofpacket),                                                                        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src2_endofpacket),                                                                          //          .endofpacket
		.sink6_ready          (rsp_demux_008_src2_ready),                                                                                //     sink6.ready
		.sink6_valid          (rsp_demux_008_src2_valid),                                                                                //          .valid
		.sink6_channel        (rsp_demux_008_src2_channel),                                                                              //          .channel
		.sink6_data           (rsp_demux_008_src2_data),                                                                                 //          .data
		.sink6_startofpacket  (rsp_demux_008_src2_startofpacket),                                                                        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src2_endofpacket),                                                                          //          .endofpacket
		.sink7_ready          (rsp_demux_009_src2_ready),                                                                                //     sink7.ready
		.sink7_valid          (rsp_demux_009_src2_valid),                                                                                //          .valid
		.sink7_channel        (rsp_demux_009_src2_channel),                                                                              //          .channel
		.sink7_data           (rsp_demux_009_src2_data),                                                                                 //          .data
		.sink7_startofpacket  (rsp_demux_009_src2_startofpacket),                                                                        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src2_endofpacket),                                                                          //          .endofpacket
		.sink8_ready          (rsp_demux_010_src1_ready),                                                                                //     sink8.ready
		.sink8_valid          (rsp_demux_010_src1_valid),                                                                                //          .valid
		.sink8_channel        (rsp_demux_010_src1_channel),                                                                              //          .channel
		.sink8_data           (rsp_demux_010_src1_data),                                                                                 //          .data
		.sink8_startofpacket  (rsp_demux_010_src1_startofpacket),                                                                        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src1_endofpacket),                                                                          //          .endofpacket
		.sink9_ready          (rsp_demux_011_src1_ready),                                                                                //     sink9.ready
		.sink9_valid          (rsp_demux_011_src1_valid),                                                                                //          .valid
		.sink9_channel        (rsp_demux_011_src1_channel),                                                                              //          .channel
		.sink9_data           (rsp_demux_011_src1_data),                                                                                 //          .data
		.sink9_startofpacket  (rsp_demux_011_src1_startofpacket),                                                                        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src1_endofpacket),                                                                          //          .endofpacket
		.sink10_ready         (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //    sink10.ready
		.sink10_valid         (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink10_channel       (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink10_data          (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink10_startofpacket (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink10_endofpacket   (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                          //          .ready
		.in_data              (cmd_demux_src0_data),                                                           //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                    //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                  //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                    //          .ready
		.in_data              (cmd_demux_src1_data),                                                     //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                      //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                    //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                      //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                       //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                 //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_002_src1_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_002_src1_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_002_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_002_src1_ready),                                                   //          .ready
		.in_data              (cmd_demux_002_src1_data),                                                    //          .data
		.out_endofpacket      (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (cmd_demux_003_src10_valid),                                                                               //      sink.valid
		.in_channel           (cmd_demux_003_src10_channel),                                                                             //          .channel
		.in_startofpacket     (cmd_demux_003_src10_startofpacket),                                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src10_endofpacket),                                                                         //          .endofpacket
		.in_ready             (cmd_demux_003_src10_ready),                                                                               //          .ready
		.in_data              (cmd_demux_003_src10_data),                                                                                //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_wr_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (cmd_demux_004_src10_valid),                                                                               //      sink.valid
		.in_channel           (cmd_demux_004_src10_channel),                                                                             //          .channel
		.in_startofpacket     (cmd_demux_004_src10_startofpacket),                                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src10_endofpacket),                                                                         //          .endofpacket
		.in_ready             (cmd_demux_004_src10_ready),                                                                               //          .ready
		.in_data              (cmd_demux_004_src10_data),                                                                                //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_rd_to_to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                          //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                        //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                          //          .ready
		.in_data              (rsp_demux_src0_data),                                                           //          .data
		.out_endofpacket      (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_sram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                          //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                        //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                          //          .ready
		.in_data              (rsp_demux_src1_data),                                                           //          .data
		.out_endofpacket      (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_sram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_001_src2_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_001_src2_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_001_src2_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src2_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_001_src2_ready),                                                   //          .ready
		.in_data              (rsp_demux_001_src2_data),                                                    //          .data
		.out_endofpacket      (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                                          // clk_reset.reset
		.in_valid             (rsp_demux_012_src0_valid),                                                                                //      sink.valid
		.in_channel           (rsp_demux_012_src0_channel),                                                                              //          .channel
		.in_startofpacket     (rsp_demux_012_src0_startofpacket),                                                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src0_endofpacket),                                                                          //          .endofpacket
		.in_ready             (rsp_demux_012_src0_ready),                                                                                //          .ready
		.in_data              (rsp_demux_012_src0_data),                                                                                 //          .data
		.out_endofpacket      (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (13),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                                  //       clk.clk
		.reset                (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                                                          // clk_reset.reset
		.in_valid             (rsp_demux_012_src1_valid),                                                                                //      sink.valid
		.in_channel           (rsp_demux_012_src1_channel),                                                                              //          .channel
		.in_startofpacket     (rsp_demux_012_src1_startofpacket),                                                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src1_endofpacket),                                                                          //          .endofpacket
		.in_ready             (rsp_demux_012_src1_ready),                                                                                //          .ready
		.in_data              (rsp_demux_012_src1_data),                                                                                 //          .data
		.out_endofpacket      (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (to_external_bus_bridge_0_avalon_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                   // (terminated)
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_sram_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (onchip_sram_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (onchip_sram_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                   //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex0_1_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (hex0_1_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (hex0_1_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex2_3_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (hex2_3_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (hex2_3_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex4_5_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (hex4_5_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (hex4_5_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (slider_switches_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (slider_switches_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (slider_switches_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (interval_timer_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (interval_timer_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (interval_timer_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)               //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                 //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                 //         .error
	);

	CPEN_Computer_V1_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (Onchip_SRAM_reset1_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                 //         .error
	);

endmodule
