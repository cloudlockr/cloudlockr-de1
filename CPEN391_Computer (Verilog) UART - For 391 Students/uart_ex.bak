

#define RS232_ReceiverFifo                  (*(volatile unsigned char *)(0xFF210200))
#define RS232_TransmitterFifo               (*(volatile unsigned char *)(0xFF210200))
#define RS232_InterruptEnableReg            (*(volatile unsigned char *)(0xFF210202))
#define RS232_InterruptIdentificationReg    (*(volatile unsigned char *)(0xFF210204))
#define RS232_FifoControlReg                (*(volatile unsigned char *)(0xFF210204))
#define RS232_LineControlReg                (*(volatile unsigned char *)(0xFF210206))
#define RS232_ModemControlReg               (*(volatile unsigned char *)(0xFF210208))
#define RS232_LineStatusReg                 (*(volatile unsigned char *)(0xFF21020A))
#define RS232_ModemStatusReg                (*(volatile unsigned char *)(0xFF21020C))
#define RS232_ScratchReg                    (*(volatile unsigned char *)(0xFF21020E))
#define RS232_DivisorLatchLSB               (*(volatile unsigned char *)(0xFF210200))
#define RS232_DivisorLatchMSB               (*(volatile unsigned char *)(0xFF210202))

// TODO:
// create similar defines for other port(s) (lie Bluetooth )
// match verilog defined addrs in SerialIODecoder.v file for earlier in 1.3

#define Bluetooth_ReceiverFifo                  (*(volatile unsigned char *)(0xFF210220))
#define Bluetooth_TransmitterFifo               (*(volatile unsigned char *)(0xFF210220))
#define Bluetooth_InterruptEnableReg            (*(volatile unsigned char *)(0xFF210222))
#define Bluetooth_InterruptIdentificationReg    (*(volatile unsigned char *)(0xFF210224))
#define Bluetooth_FifoControlReg                (*(volatile unsigned char *)(0xFF210224))
#define Bluetooth_LineControlReg                (*(volatile unsigned char *)(0xFF210226))
#define Bluetooth_ModemControlReg               (*(volatile unsigned char *)(0xFF210228))
#define Bluetooth_LineStatusReg                 (*(volatile unsigned char *)(0xFF21022A))
#define Bluetooth_ModemStatusReg                (*(volatile unsigned char *)(0xFF21022C))
#define Bluetooth_ScratchReg                    (*(volatile unsigned char *)(0xFF21022E))
#define Bluetooth_DivisorLatchLSB               (*(volatile unsigned char *)(0xFF210220))
#define Bluetooth_DivisorLatchMSB               (*(volatile unsigned char *)(0xFF210222))



// The "unsigned char *" bit of the declaration ensures a pointer to 
// unsigned byte wide data is created, so that when we use it , 
// unsigned bytes of data will be transferred.

// HINT: 
// To write a byte to the FifoControlReg of the UART, we could write
// something like this: 
// RS232_FifoControlReg = 0x55 ;

// TODO: 
// Use DS5 Software environment to: 
// write the following functions in 'C' to drive the simple RS232 port
// HINT: consult vhdl_16550_uart_2_2.pdf from Canvas for details of 
// programming


/**************************************************************************
/* Subroutine to initialise the RS232 Port by writing some data
** to the internal registers.
** Call this function at the start of the program before you attempt
** to read or write to data via the RS232 port
**
** Refer to UART data sheet for details of registers and programming
***************************************************************************/

void Init_RS232(void)
{
  // set bit 7 of Line Control Register to 1, to gain access to the baud rate registers
  RS232_LineControlReg = 0x80; // 0x80 = 1000 0000

  // set Divisor latch (LSB and MSB) with correct value for required baud rate
  /*
    The baud rate for the WiFi chip should be 115200.
    The baud rate for the BT chip in AT mode should be 38400. In communications mode it should be 115200.
    It could also be different baud rates like 9600, it's kind of a trial and error process.
  */
  // Baud rate divisor value = (frequency of BR_clk) / (desired baud rate x 16)
  // BR_clk = input clock to UART, 50 MHz?
  RS232_DivisorLatchLSB = (50000000) / ( 115200 * 16); 
  RS232_DivisorLatchMSB = (50000000) / ( 115200 * 16); 

  // set bit 7 of Line control register back to 0 and
  RS232_LineControlReg = 0x00; // 0x80 = 1000 0000

  // program other bits in that reg for 8 bit data, 1 stop bit, no parity etc
  RS232_LineControlReg = 0x03; // 0x03 = 0000 0011

  // Reset the Fifo's in the FiFo Control Reg by setting bits 1 & 2
  RS232_FifoControlReg = 0x06; // 0x06 = 0000 0110

  // Now Clear all bits in the FiFo control registers
  RS232_FifoControlReg = 0x00; // 0x00 = 0000 0000
  
}

typedef enum
{
    ePORT_WIFI = 0,
    ePORT_BLUE_TOOTH,
    ePORT_TOUCH_SCREEN,
}
ePORT;

/* equivalent to below:
#define ePORT_WIFI          0
#define ePORT_BLUETOOTH     1
#define ePORT_TOUCH_SCREEN  2
*/

/************
void Initialize_RS232( ePORT ePort )
{
    if ( ePort == ePORT_WIFI )
    {
        // init wifi port
    }
    else if ( ePort == ePORT_BLUE_TOOTH )
    {
        // init bluetooth serial port
    }
    else if ( ePort == ePORT_TOUCH_SCREEN )
    {
        // init touch screen
    }
}

int putcharRS232(ePORT ePort, int c)
{
    if ( ePort == ePORT_WIFI )
    {
        // init wifi port
    }
    else if ( ePort == ePORT_BLUE_TOOTH )
    {
        // init bluetooth serial port
    }
    else if ( ePort == ePORT_TOUCH_SCREEN )
    {
        // init touch screen
    }
}
*******/


int putcharRS232(int c)
{
  // wait for Transmitter Holding Register bit (5) of line status register to be '1'
  // indicating we can write to the device
  while ( !(RS232_LineStatusReg & (1 << 5)) )
  {
    // wait
  }
  
  // write character to Transmitter fifo register
  RS232_TransmitterFifo = c;
  
  // return the character we printed
  return c;
}

int getcharRS232( void )
{
  // wait for Data Ready bit (0) of line status register to be '1'
  while ( !(RS232_LineStatusReg & (1 << 0)) )
  {
    // wait
  }
  
  // read new character from ReceiverFiFo register
  char newChar = RS232_ReceiverFifo;
  
  // return new character
  return newChar;
}


// the following function polls the UART to determine if any character
// has been received. It doesn't wait for one, or read it, it simply tests
// to see if one is available to read from the FIFO
int RS232TestForReceivedData(void)
{
  // if RS232_LineStatusReg bit 0 is set to 1
  //return TRUE, otherwise return FALSE
  if (RS232_LineStatusReg & (1 << 0))
  {
    return 1;
  }
  
  return 0;
}

//
// Remove/flush the UART receiver buffer by removing any unread characters
//
void RS232Flush(void)
{
  // while bit 0 of Line Status Register == ‘1’
  // read unwanted char out of fifo receiver buffer
  
  while ( (RS232_LineStatusReg & (1 << 0)) )
  {
    RS232_ReceiverFifo = 0x00;
  }
  
  // return; // no more characters so return
  return;
}

void AppInit( void )
{
    Init_RS232( ePORT_WIFI );
    Init_RS232( ePORT_BLUE_TOOTH );
    Init_RS232( ePORT_TOUCH_SCREEN );
    
    
    Crypt_Init();
    Http_Init();
    
    Wifi_InitAtCmds();
    Bluetooth_InitAtCmds();
}

int main(void)
{
    char ch;
    
    //Init_RS232();
    AppInit();
  
    // main routine/loop here
    while (1)
    {
        Init_RS232( ePORT_TOUCH_SCREEN );
    
        // Polling data from wifi UART.
        if ( RS232TestForReceiveData( ePORT_WIFI ) )
        {
            ch = getcharRS232( ePORT_WIFI );
        
            Wifi_Receive( ch ); // save ch in a buffer, process data in buffer if enough data has been received.
        }
    
        // Polling data from bluetooth UART.
        if ( RS232TestForReceiveData( ePORT_BLUE_TOOTH ) )
        {
            ch = getcharRS232( ePORT_BLUE_TOOTH );
        
            Bluetooth_Receive( ch ); // save ch in a buffer, process data in buffer if enough data has been received.
        }
    }
  
    return 0;
}














